// Expressions
// Start with exprcommastar
?exprcommastar: exprcommaplus?

exprcommaplus: expr
    | exprcommaplus COMMA expr

expr: expr1ni IFF expr
    | expr1

expr1: expr2ni IMPLIES exprimplies
    | exprexpliesni EXPLIES expr2
    | expr2

exprimplies: expr2ni IMPLIES exprimplies
    | expr2

expr2: expr3ni AND exprand
    | expr3ni OR  expror
    | expr3

exprand: expr3ni AND exprand
    | expr3

expror: expr3ni OR expror
    | expr3

expr3: expr4ni LESS expr4
    | expr4ni GREATER expr4
    | expr4ni LTEQ expr4
    | expr4ni GTEQ expr4
    | expr4ni EQ expr4
    | expr4ni NEQ expr4
    | expr4ni PARTORDER expr4
    | expr4

expr4: expr4ni CONCAT expr5
    | expr5

expr5: expr5ni PLUS expr6
    | expr5ni MINUS expr6
    | expr6

expr6: expr6ni TIMES expr7
    | expr6ni DIVIDE expr7
    | expr6ni MOD expr7
    | expr7

expr7: NOT   expr7
    | MINUS expr7
    | expr8

expr8: expr8ni LBKT exprcommaplus RBKT
    | expr8ni LBKT exprcommaplus COLONEQUALS expr RBKT
    | expr8ni NOT ID
    | expr8ni LBKT NUMBER COLON NUMBER RBKT
    | expr9

expr9: FALSE
    | TRUE
    | NUMBER
    | REALNUMBER
    | ID
    | ID LPAR exprcommastar RPAR
    | OLD LPAR expr RPAR
    | IF expr THEN expr ELSE expr
    | LBRC idsexprcommaplus RBRC
    | LPAR expr RPAR
    | function

// expressions  without if-then-else

expr1ni: expr2ni IMPLIES exprimpliesni
    | exprexpliesni EXPLIES expr2ni
    | expr2ni

exprimpliesni: expr2ni IMPLIES exprimpliesni
    | expr2ni

exprexpliesni: exprexpliesni EXPLIES expr2ni
    | expr2ni

expr2ni: expr3ni AND exprandni
    | expr3ni OR  exprorni
    | expr3ni

exprandni: expr3ni AND exprandni
    | expr3ni

exprorni: expr3ni OR exprorni
    | expr3ni

expr3ni: expr4ni LESS expr4ni
    | expr4ni GREATER expr4ni
    | expr4ni LTEQ expr4ni
    | expr4ni GTEQ expr4ni
    | expr4ni EQ expr4ni
    | expr4ni NEQ expr4ni
    | expr4ni PARTORDER expr4ni
    | expr4ni

expr4ni: expr4ni CONCAT expr5ni
    | expr5ni

expr5ni: expr5ni PLUS expr6ni
    | expr5ni MINUS expr6ni
    | expr6ni

expr6ni: expr6ni TIMES expr7ni
    | expr6ni DIVIDE expr7ni
    | expr6ni MOD expr7ni
    | expr7ni

expr7ni: NOT   expr7ni
    | MINUS expr7ni
    | expr8ni

expr8ni: expr8ni LBKT exprcommaplus RBKT
    | expr8ni LBKT exprcommaplus COLONEQUALS expr RBKT
    | expr8ni LBKT NUMBER COLON NUMBER RBKT
    | expr8ni NOT ID
    | expr9ni

expr9ni: FALSE
    | TRUE
    | NUMBER
    | REALNUMBER
    | ID
    | ID LPAR exprcommastar RPAR
    | OLD LPAR expr RPAR
    | LBRC idsexprcommaplus RBRC
    | LPAR expr RPAR
    | function

quant: FORALL
    | EXISTS

idsexprcommaplus: ID COLON expr
    | idsexprcommaplus COMMA ID COLON expr

function: abs_function

abs_function: ABS LPAR numeric RPAR

numeric: ID
    | NUMBER
    | numeric numeric_operator numeric
    | MINUS numeric
    | PLUS numeric
    | abs_function

numeric_operator: PLUS
    | MINUS
    | TIMES
    | DIVIDE

// Terminals

ABS: "abs"
AND: "&&"
COLON: ":"
COLONEQUALS: ":="
COMMA: ","
CONCAT: "++"
DIVIDE: "/"
ELSE.1: "else"
EQ: "=="
EXISTS.1: "exists"
EXPLIES: "<=="
FALSE.1: "false"
FORALL.1: "forall"
GREATER: ">"
GTEQ: ">="
ID: /[A-Za-z'~#$\^_.?\\][0-9A-Za-z'~#$\^_.?\\]*/
IF.1: "if"
IFF: "<==>"
IMPLIES: "==>"
LBKT: "["
LBRC: "{"
LESS: "<"
LPAR: "("
LTEQ: "<="
MINUS: "-"
MOD: "%"
NEQ: "!="
NOT: "!"
NUMBER: "0" | /[1-9][0-9]*/
OLD.1: "old"
OR: "||"
PARTORDER: "<:"
PLUS: "+"
QSEP: "::"
RBKT: "]"
RBRC: "}"
REALNUMBER: NUMBER "." /[0-9]+/
RPAR: ")"
THEN.1: "then"
TIMES: "*"
TRUE.1: "true"

// Misc
%import common.WS
%ignore WS