/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/variables.js":
/*!*************************!*\
  !*** ./js/variables.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n__webpack_require__(/*! gasparesganga-jquery-loading-overlay */ \"./node_modules/gasparesganga-jquery-loading-overlay/dist/loadingoverlay.min.js\");\r\nconst {Modal} = __webpack_require__(/*! bootstrap */ \"./node_modules/bootstrap/dist/js/bootstrap.esm.js\");\r\n__webpack_require__(/*! datatables.net-bs5 */ \"./node_modules/datatables.net-bs5/js/dataTables.bootstrap5.mjs\");\r\n__webpack_require__(/*! datatables.net-select */ \"./node_modules/datatables.net-select/js/dataTables.select.mjs\");\r\n__webpack_require__(/*! jquery-ui/ui/widgets/autocomplete */ \"./node_modules/jquery-ui/ui/widgets/autocomplete.js\");\r\n__webpack_require__(/*! ./bootstrap-tokenfield.js */ \"./js/bootstrap-tokenfield.js\");\r\n__webpack_require__(/*! jquery-ui/ui/effects/effect-highlight */ \"./node_modules/jquery-ui/ui/effects/effect-highlight.js\");\r\n__webpack_require__(/*! awesomplete */ \"./node_modules/awesomplete/awesomplete.js\");\r\n__webpack_require__(/*! awesomplete/awesomplete.css */ \"./node_modules/awesomplete/awesomplete.css\");\r\n//require('datatables.net-colreorderwithresize-npm');\r\n__webpack_require__(/*! datatables.net-colreorder-bs5 */ \"./node_modules/datatables.net-colreorder-bs5/js/colReorder.bootstrap5.mjs\");\r\n__webpack_require__(/*! ./bootstrap-confirm-button */ \"./js/bootstrap-confirm-button.js\");\r\n\r\nlet utils = __webpack_require__(/*! ./hanfor-utils */ \"./js/hanfor-utils.js\");\r\n\r\n// Globals\r\nlet available_types = ['CONST', 'ENUM_INT', 'ENUM_REAL'];\r\nlet search_autocomplete = [\r\n    \":AND:\",\r\n    \":OR:\",\r\n    \":NOT:\",\r\n    \":COL_INDEX_01:\",\r\n    \":COL_INDEX_02:\",\r\n    \":COL_INDEX_03:\",\r\n    \":COL_INDEX_04:\"\r\n];\r\nlet var_search_string = sessionStorage.getItem('var_search_string');\r\nlet type_inference_errors = [];\r\nconst {SearchNode} = __webpack_require__(/*! ./datatables-advanced-search.js */ \"./js/datatables-advanced-search.js\");\r\nlet search_tree = undefined;\r\nlet visible_columns = [true, true, true, true, true];\r\nlet get_query = JSON.parse(search_query); // search_query is set in layout.html\r\nconst {sendTelemetry} = __webpack_require__(/*! ../../telemetry/static/telemetry */ \"../telemetry/static/telemetry.js\")\r\n\r\n/**\r\n * Apply search tree on datatables data.\r\n * @param data\r\n * @returns {bool|XPathResult}\r\n */\r\nfunction evaluate_search(data) {\r\n    return search_tree.evaluate(data, visible_columns);\r\n}\r\n\r\n/**\r\n * Update the search expression tree.\r\n */\r\nfunction update_search() {\r\n    var_search_string = $('#search_bar').val().trim();\r\n    sessionStorage.setItem('var_search_string', var_search_string);\r\n    search_tree = SearchNode.fromQuery(var_search_string);\r\n}\r\n\r\n/**\r\n * Store the currently active (in the modal) variable.\r\n * @param variables_table\r\n */\r\nfunction store_variable(variables_table) {\r\n    let var_modal_content = $('.modal-content');\r\n    var_modal_content.LoadingOverlay('show');\r\n\r\n    // Get data.\r\n    const var_name = $('#variable_name').val();\r\n    const var_name_old = $('#variable_name_old').val();\r\n    const var_type = $('#variable_type').val();\r\n    const var_type_old = $('#variable_type_old').val();\r\n    const associated_row_id = parseInt($('#modal_associated_row_index').val());\r\n    const occurrences = $('#occurences').val();\r\n    const const_val = $('#variable_value').val();\r\n    const const_val_old = $('#variable_value_old').val();\r\n    const updated_constraints = $('#variable_constraint_updated').val();\r\n    const belongs_to_enum = $('#belongs_to_enum').val();\r\n    const belongs_to_enum_old = $('#belongs_to_enum_old').val();\r\n\r\n    // Fetch the constraints\r\n    let constraints = {};\r\n    $('.formalization_card').each(function () {\r\n        // Scope and Pattern\r\n        let constraint = {};\r\n        constraint['id'] = $(this).attr('title');\r\n        $(this).find('select').each(function () {\r\n            if ($(this).hasClass('scope_selector')) {\r\n                constraint['scope'] = $(this).val();\r\n            }\r\n            if ($(this).hasClass('pattern_selector')) {\r\n                constraint['pattern'] = $(this).val();\r\n            }\r\n        });\r\n\r\n        // Expressions\r\n        constraint['expression_mapping'] = {};\r\n        $(this).find(\"textarea.reqirement-variable\").each(function () {\r\n            if ($(this).attr('title') !== '')\r\n                constraint['expression_mapping'][$(this).attr('title')] = $(this).val();\r\n        });\r\n\r\n        constraints[constraint['id']] = constraint;\r\n    });\r\n\r\n    // Update available types.\r\n    if (var_type !== null && available_types.indexOf(var_type) <= -1) {\r\n        available_types.push(var_type);\r\n    }\r\n\r\n    // Process enumerators in case we have an enum\r\n    let enumerators = [];\r\n    if ((var_type === 'ENUM_INT') || (var_type === 'ENUM_REAL')) {\r\n        // Fetch enumerators.\r\n        $('.enumerator-input').each(function () {\r\n            let enum_name = $(this).find('.enum_name_input').val();\r\n            let enum_value = $(this).find('.enum_value_input').val();\r\n            enumerators.push([enum_name, enum_value]);\r\n        });\r\n    }\r\n\r\n    // TODO use variable UUID\r\n    sendTelemetry(\"variables\", var_name_old, \"save\")\r\n\r\n    // Store the variable.\r\n    $.post(\"api/var/update\",\r\n        {\r\n            name: var_name,\r\n            name_old: var_name_old,\r\n            type: var_type,\r\n            const_val: const_val,\r\n            const_val_old: const_val_old,\r\n            type_old: var_type_old,\r\n            occurrences: occurrences,\r\n            constraints: JSON.stringify(constraints),\r\n            updated_constraints: updated_constraints,\r\n            enumerators: JSON.stringify(enumerators),\r\n            belongs_to_enum: belongs_to_enum,\r\n            belongs_to_enum_old: belongs_to_enum_old\r\n        },\r\n        // Update var table on success or show an error message.\r\n        function (data) {\r\n            var_modal_content.LoadingOverlay('hide', true);\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                let modal = $('#variable_modal')\r\n                modal.data('unsaved_changes', false);\r\n                if (data.rebuild_table) {\r\n                    //location.reload();\r\n                    Modal.getOrCreateInstance(modal).hide()\r\n                    $('#variables_table').DataTable().ajax.reload(null, false)\r\n                } else {\r\n                    variables_table.row(associated_row_id).data(data.data).draw();\r\n                    Modal.getOrCreateInstance(modal).hide()\r\n                }\r\n            }\r\n        });\r\n}\r\n\r\n/**\r\n * Start a new import session (redirect to the session on success).\r\n */\r\nfunction start_import_session() {\r\n    let variable_import_modal = $('#variable_import_modal');\r\n    let sess_name = $('#variable_import_sess_name').val();\r\n    let sess_revision = $('#variable_import_sess_revision').val();\r\n\r\n    variable_import_modal.LoadingOverlay('show');\r\n\r\n    $.post(\"api/var/start_import_session\",\r\n        {\r\n            sess_name: sess_name,\r\n            sess_revision: sess_revision\r\n        },\r\n        function (data) {\r\n            variable_import_modal.LoadingOverlay('hide', true);\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                window.location.href = base_url + \"variable_import/\" + data['session_id'];\r\n            }\r\n        });\r\n}\r\n\r\n/**\r\n * Open modal for the user to trigger variable import.\r\n * @param sess_name\r\n * @param sess_revision\r\n */\r\nfunction open_import_modal(sess_name, sess_revision) {\r\n    // Prepare requirement Modal\r\n    let variable_import_modal = $('#variable_import_modal');\r\n    $('#variable_import_sess_name').val(sess_name);\r\n    $('#variable_import_sess_revision').val(sess_revision);\r\n    $('#variable_import_modal_title').html('Import from Session: ' + sess_name + ' at: ' + sess_revision);\r\n\r\n    //variable_import_modal.modal('show');\r\n    Modal.getOrCreateInstance(variable_import_modal).show();\r\n\r\n    // Load informations about selected var collection\r\n    variable_import_modal.LoadingOverlay('show');\r\n    $.post(\"api/var/var_import_info\",\r\n        {\r\n            sess_name: sess_name,\r\n            sess_revision: sess_revision\r\n        },\r\n        function (data) {\r\n            variable_import_modal.LoadingOverlay('hide', true);\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                $('#import_tot_number').html('Total:\\t' + data['tot_vars'] + ' Variables.');\r\n                $('#import_new_number').html('New:\\t' + data['new_vars'] + ' Variables.');\r\n            }\r\n        });\r\n}\r\n\r\n/**\r\n * Apply multi edit on selected variables.\r\n * @param variables_table\r\n * @param del\r\n */\r\nfunction apply_multi_edit(variables_table, del = false) {\r\n    let page = $('body');\r\n    page.LoadingOverlay('show');\r\n    let change_type = $('#multi-change-type-input').val().trim();\r\n    let selected_vars = [];\r\n    variables_table.rows({selected: true}).every(function () {\r\n        let d = this.data();\r\n        selected_vars.push(d['name']);\r\n    });\r\n\r\n    // Update selected vars.\r\n    $.post(\"api/var/multi_update\",\r\n        {\r\n            change_type: change_type,\r\n            selected_vars: JSON.stringify(selected_vars),\r\n            del: del\r\n        },\r\n        // Update requirements table on success or show an error message.\r\n        function (data) {\r\n            page.LoadingOverlay('hide', true);\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                location.reload();\r\n            }\r\n        });\r\n}\r\n\r\n/**\r\n * Enable/disable the active variables (P, Q, R, ...) in the requirement modal based on scope and pattern.\r\n */\r\nfunction update_displayed_constraint_inputs() {\r\n    $('.requirement_var_group').each(function () {\r\n        $(this).hide();\r\n    });\r\n\r\n    $('.formalization_card').each(function () {\r\n        // Fetch attributes\r\n        const formalization_id = $(this).attr('title');\r\n        const selected_scope = $('#requirement_scope' + formalization_id).val();\r\n        const selected_pattern = $('#requirement_pattern' + formalization_id).val();\r\n        let var_p = $('#requirement_var_group_p' + formalization_id);\r\n        let var_q = $('#requirement_var_group_q' + formalization_id);\r\n        let var_r = $('#requirement_var_group_r' + formalization_id);\r\n        let var_s = $('#requirement_var_group_s' + formalization_id);\r\n        let var_t = $('#requirement_var_group_t' + formalization_id);\r\n        let var_u = $('#requirement_var_group_u' + formalization_id);\r\n        let var_v = $('#requirement_var_group_v' + formalization_id);\r\n\r\n        switch (selected_scope) {\r\n            case 'BEFORE':\r\n            case 'AFTER':\r\n                var_p.show();\r\n                break;\r\n            case 'BETWEEN':\r\n            case 'AFTER_UNTIL':\r\n                var_p.show();\r\n                var_q.show();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        Object.keys(_PATTERNS[selected_pattern]['env']).forEach(function (key) {\r\n            switch (key) {\r\n                case 'R':\r\n                    var_r.show();\r\n                    break;\r\n                case 'S':\r\n                    var_s.show();\r\n                    break;\r\n                case 'T':\r\n                    var_t.show();\r\n                    break;\r\n                case 'U':\r\n                    var_u.show();\r\n                    break;\r\n                case 'V':\r\n                    var_v.show();\r\n                    break;\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the formalization textarea based on the selected scope and expressions in P, Q, R, S, T, U, V.\r\n */\r\nfunction update_formalization(changes = true) {\r\n    $('.formalization_card').each(function () {\r\n        // Fetch attributes\r\n        const formalization_id = $(this).attr('title');\r\n\r\n        let formalization = '';\r\n        const selected_scope = $('#requirement_scope' + formalization_id).find('option:selected').text().replace(/\\s\\s+/g, ' ');\r\n        const selected_pattern = $('#requirement_pattern' + formalization_id).find('option:selected').text().replace(/\\s\\s+/g, ' ');\r\n\r\n        if (selected_scope !== 'None' && selected_pattern !== 'None') {\r\n            formalization = selected_scope + ', ' + selected_pattern + '.';\r\n        }\r\n\r\n        // Update formalization with variables.\r\n        let var_p = $('#formalization_var_p' + formalization_id).val();\r\n        let var_q = $('#formalization_var_q' + formalization_id).val();\r\n        let var_r = $('#formalization_var_r' + formalization_id).val();\r\n        let var_s = $('#formalization_var_s' + formalization_id).val();\r\n        let var_t = $('#formalization_var_t' + formalization_id).val();\r\n        let var_u = $('#formalization_var_u' + formalization_id).val();\r\n        let var_v = $('#formalization_var_v' + formalization_id).val();\r\n\r\n        if (var_p.length > 0) {\r\n            formalization = formalization.replace(/{P}/g, var_p);\r\n        }\r\n        if (var_q.length > 0) {\r\n            formalization = formalization.replace(/{Q}/g, var_q);\r\n        }\r\n        if (var_r.length > 0) {\r\n            formalization = formalization.replace(/{R}/g, var_r);\r\n        }\r\n        if (var_s.length > 0) {\r\n            formalization = formalization.replace(/{S}/g, var_s);\r\n        }\r\n        if (var_t.length > 0) {\r\n            formalization = formalization.replace(/{T}/g, var_t);\r\n        }\r\n        if (var_u.length > 0) {\r\n            formalization = formalization.replace(/{U}/g, var_u);\r\n        }\r\n        if (var_v.length > 0) {\r\n            formalization = formalization.replace(/{V}/g, var_v);\r\n        }\r\n\r\n        $('#current_formalization_textarea' + formalization_id).val(formalization);\r\n\r\n        // Update visual representation of type inference errors.\r\n        let header = $('#formalization_heading' + formalization_id);\r\n        if (formalization_id in type_inference_errors) {\r\n            for (let i = 0; i < type_inference_errors[formalization_id].length; i++) {\r\n                $('#formalization_var_' + type_inference_errors[formalization_id][i] + formalization_id)\r\n                    .addClass('type-error');\r\n                header.addClass('type-error-head');\r\n            }\r\n        } else {\r\n            header.removeClass('type-error-head');\r\n        }\r\n    });\r\n    $('#variable_constraint_updated').val('true');\r\n\r\n    if (changes) {\r\n        $('#variable_modal').data('unsaved_changes', true);\r\n    }\r\n}\r\n\r\nfunction delete_constraint(constraint_id) {\r\n    let requirement_modal_content = $('.modal-content');\r\n    requirement_modal_content.LoadingOverlay('show');\r\n    const var_name = $('#variable_name').val();\r\n    $.post(\"api/var/del_constraint\",\r\n        {\r\n            name: var_name,\r\n            constraint_id: constraint_id\r\n        },\r\n        function (data) {\r\n            requirement_modal_content.LoadingOverlay('hide', true);\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                $('#formalization_accordion').html(data['html']);\r\n            }\r\n        }).done(function () {\r\n        update_displayed_constraint_inputs();\r\n        update_formalization(false);\r\n        bind_expression_buttons();\r\n    });\r\n}\r\n\r\nfunction bind_expression_buttons() {\r\n    $('.formalization_selector').change(function () {\r\n        update_displayed_constraint_inputs();\r\n        update_formalization();\r\n    });\r\n    $('.reqirement-variable, .req_var_type').change(function () {\r\n        update_formalization();\r\n    });\r\n\r\n    // $('.delete_formalization').confirmation({\r\n    //     rootSelector: '.delete_formalization'\r\n    // }).click(function () {\r\n    //     delete_constraint($(this).attr('name'));\r\n    // });\r\n\r\n    $('.delete_formalization').bootstrapConfirmButton({\r\n        onConfirm: function () {\r\n            delete_constraint($(this).attr('name'))\r\n        }\r\n    })\r\n}\r\n\r\nfunction add_constraint() {\r\n    // Request a new Constraint/Formalization. And add its edit elements to the modal.\r\n    let var_modal_content = $('.modal-content');\r\n    var_modal_content.LoadingOverlay('show');\r\n\r\n    // Get data.\r\n    const var_name = $('#variable_name').val();\r\n\r\n    // Store the variable.\r\n    $.post(\"api/var/new_constraint\",\r\n        {\r\n            name: var_name\r\n        },\r\n        // Update var table on success or show an error message.\r\n        function (data) {\r\n            var_modal_content.LoadingOverlay('hide', true);\r\n            let constraint = $(data['html'])\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                constraint.appendTo('#formalization_accordion');\r\n            }\r\n        }).done(function () {\r\n        update_displayed_constraint_inputs();\r\n        update_formalization(false);\r\n        bind_expression_buttons();\r\n    });\r\n}\r\n\r\nfunction get_variable_constraints_html(var_name) {\r\n    $.post(\"api/var/get_constraints_html\",\r\n        {\r\n            name: var_name\r\n        },\r\n        function (data) {\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                type_inference_errors = data.type_inference_errors;\r\n                $('#formalization_accordion').html(data['html']);\r\n            }\r\n        }).done(function () {\r\n        update_displayed_constraint_inputs();\r\n        update_formalization(false);\r\n        bind_expression_buttons();\r\n    });\r\n}\r\n\r\nfunction is_constraint_link(name) {\r\n    const regex = /^(Constraint_)(.*)(_[0-9]+$)/gm;\r\n    let result = null;\r\n    let match = regex.exec(name);\r\n\r\n    if (match !== null) {\r\n        result = match[2];\r\n    }\r\n\r\n    return result\r\n}\r\n\r\n/**\r\n * Find the datatable row index for a variable by its name.\r\n * @param {number} name the requirement id.\r\n * @returns {number} row_index the datatables row index.\r\n */\r\nfunction get_rowidx_by_var_name(name) {\r\n    let variables_table = $('#variables_table').DataTable();\r\n    let result = -1;\r\n    variables_table\r\n        .row(function (idx, data) {\r\n            if (data.name === name) {\r\n                result = idx;\r\n            }\r\n        });\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Show / Hide Value CONST value input for variables.\r\n * @param revert\r\n */\r\nfunction show_variable_val_input(revert) {\r\n    if (revert === true) {\r\n        $('#variable_value_form_group').hide();\r\n    } else {\r\n        $('#variable_value_form_group').show();\r\n    }\r\n}\r\n\r\nfunction show_belongs_to_enum_input(revert = false) {\r\n    if (revert === true) {\r\n        $('#variable_belongs_to_form_group').hide();\r\n    } else {\r\n        $('#variable_belongs_to_form_group').show();\r\n    }\r\n}\r\n\r\nfunction show_enumerators_in_modal(revert = false) {\r\n    if (revert === true) {\r\n        $('.enum-controls').hide();\r\n    } else {\r\n        $('.enum-controls').show();\r\n    }\r\n}\r\n\r\nfunction load_enumerators_to_modal(var_name) {\r\n    $.post(\"api/var/get_enumerators\",\r\n        {\r\n            name: var_name\r\n        },\r\n        function (data) {\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                // Remove prefix from Enumerators for display.\r\n                $.each(data['enumerators'], function (index, item) {\r\n                    const stripped_name = item[0].substr(var_name.length + 1);\r\n                    add_enumerator_template(stripped_name, item[1]);\r\n                })\r\n            }\r\n        }).done(function () {\r\n        update_displayed_constraint_inputs();\r\n        update_formalization(false);\r\n        bind_expression_buttons();\r\n    });\r\n}\r\n\r\nfunction load_variable(row_idx) {\r\n    // Get row data\r\n    let data = $('#variables_table').DataTable().row(row_idx).data();\r\n\r\n    // Prepare requirement Modal\r\n    let var_modal_content = $('.modal-content');\r\n    show_variable_val_input(true);\r\n    show_enumerators_in_modal(true);\r\n    show_belongs_to_enum_input(true);\r\n    // $('#variable_modal').modal('show');\r\n    Modal.getOrCreateInstance(document.getElementById('variable_modal')).show();\r\n\r\n    // Meta information\r\n    $('#modal_associated_row_index').val(row_idx);\r\n    $('#variable_name_old').val(data.name);\r\n    $('#variable_type_old').val(data.type);\r\n    $('#occurences').val(data.used_by);\r\n\r\n    // Visible information\r\n    $('#variable_modal_title').html('Variable: ' + data.name);\r\n    $('#variable_name').val(data.name);\r\n\r\n    let type_input = $('#variable_type');\r\n    let variable_value = $('#variable_value');\r\n    let variable_value_old = $('#variable_value_old');\r\n    let belongs_to_enum = $('#belongs_to_enum');\r\n    let belongs_to_enum_old = $('#belongs_to_enum_old');\r\n    let enumerators = $('#enumerators');\r\n\r\n    type_input.val(data.type);\r\n    variable_value.val('');\r\n    variable_value_old.val('');\r\n    belongs_to_enum.val('');\r\n    belongs_to_enum_old.val('');\r\n    enumerators.html('');\r\n\r\n    if (data.type === 'CONST' || data.type === 'ENUMERATOR_INT' || data.type === 'ENUMERATOR_REAL') {\r\n        show_variable_val_input();\r\n        variable_value.val(data.const_val);\r\n        variable_value_old.val(data.const_val);\r\n    }\r\n    if (data.type === 'ENUMERATOR_INT' || data.type === 'ENUMERATOR_REAL') {\r\n        show_belongs_to_enum_input();\r\n        belongs_to_enum.val(data.belongs_to_enum);\r\n        belongs_to_enum_old.val(data.belongs_to_enum);\r\n    }\r\n    if (data.type === 'ENUM_REAL' || data.type === 'ENUM_INT') {\r\n        show_enumerators_in_modal();\r\n        load_enumerators_to_modal(data.name);\r\n    }\r\n\r\n    type_input.autocomplete({\r\n        minLength: 0,\r\n        source: available_types\r\n    }).on('focus', function () {\r\n        $(this).keydown();\r\n    });\r\n\r\n    // Load constraints\r\n    get_variable_constraints_html(data.name);\r\n    // TODO send variable UUID\r\n    sendTelemetry(\"variables\", data.name, \"open\")\r\n\r\n    var_modal_content.LoadingOverlay('hide');\r\n}\r\n\r\nfunction add_variable_via_modal() {\r\n    const new_variable_name = $('#new_variable_name').val();\r\n    const new_variable_type = $('#new_variable_type').val();\r\n    const new_variable_value = $('#new_variable_const_value').val();\r\n    $.post(\"api/var/add_new_variable\",\r\n        {\r\n            name: new_variable_name,\r\n            type: new_variable_type,\r\n            value: new_variable_value\r\n        },\r\n        function (data) {\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                location.reload();\r\n                $('#new_variable_name').val(\"\")\r\n            }\r\n        });\r\n}\r\n\r\nfunction add_enumerator_template(name, value) {\r\n    const enumerator_template = `\r\n        <div class=\"input-group enumerator-input\">\r\n            <span class=\"input-group-prepend input-group-text\">Name</span>\r\n            <input class=\"form-control enum_name_input\" type=\"text\" value=\"${name}\">\r\n            <span class=\"input-group-prepend input-group-text\">Value</span>\r\n            <input class=\"form-control enum_value_input\" type=\"number\" step=\"any\" value=\"${value}\">\r\n            <buttton type=\"button\" class=\"btn btn-danger input-group-append del_enum\" data-name=\"${name}\">Delete</buttton>\r\n        </div>`;\r\n    $('#enumerators').append(enumerator_template);\r\n}\r\n\r\nfunction delete_enumerator(enum_name, enumerator_name, enum_dom) {\r\n    let var_modal = $('#variable_modal');\r\n    var_modal.LoadingOverlay('show');\r\n    $.post(\"api/var/del_var\",\r\n        {\r\n            name: enum_name + '_' + enumerator_name\r\n        },\r\n        function (data) {\r\n            var_modal.LoadingOverlay('hide', true);\r\n            if (data['success'] === false) {\r\n                alert(data['errormsg']);\r\n            } else {\r\n                enum_dom.remove();\r\n            }\r\n        });\r\n}\r\n\r\n/**\r\n * Test if pasted_text has the form:\r\n * foo<TAB>12\r\n * bar<TAB>42\r\n *\r\n * @param pasted_text\r\n * @returns {boolean}\r\n */\r\nfunction has_smart_input_form(pasted_text) {\r\n    const array_of_lines = pasted_text.match(/[^\\r\\n]+/g);\r\n    if (array_of_lines.length <= 0) {\r\n        return false;\r\n    }\r\n\r\n    for (const line of array_of_lines) {\r\n        const line_splits = line.match(/[^\\t]+/g);\r\n        if (line_splits.length !== 2) {\r\n            return false;\r\n        }\r\n        if (isNaN(line_splits[1])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Create a 2D array from input like\r\n *   foo<TAB>12\r\n *   bar<TAB>42\r\n *\r\n *  -> [[foo, 12], [bar, 42]]\r\n * @param pasted_text\r\n * @returns {Array}\r\n */\r\nfunction get_smart_input_array(pasted_text) {\r\n    const array_of_lines = pasted_text.match(/[^\\r\\n]+/g);\r\n    let result = [];\r\n    for (const line of array_of_lines) {\r\n        const line_splits = line.match(/[^\\t]+/g);\r\n        result.push([line_splits[0], line_splits[1]]);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Show the value input for new consts if type CONST is selected.\r\n */\r\nfunction update_new_var_const_value_input() {\r\n    const current_type = $('#new_variable_type').val();\r\n    let value_input = $('#new_variable_const_input');\r\n    current_type === 'CONST' ? value_input.show() : value_input.hide();\r\n}\r\n\r\n$(document).ready(function () {\r\n    init_modal()\r\n\r\n    // Prepare and load the variables table.\r\n    let variables_table = $('#variables_table').DataTable({\r\n        \"paging\": true,\r\n        \"stateSave\": true,\r\n        \"select\": {\r\n            style: 'os',\r\n            selector: 'td:first-child'\r\n        },\r\n        \"pageLength\": 50,\r\n        \"responsive\": true,\r\n        \"lengthMenu\": [[10, 50, 100, 500, -1], [10, 50, 100, 500, \"All\"]],\r\n        \"dom\": 'rt<\"container\"<\"row\"<\"col-md-6\"li><\"col-md-6\"p>>>',\r\n        \"ajax\": \"api/var/gets\",\r\n        \"deferRender\": true,\r\n        \"columns\": [\r\n            {\r\n                \"orderable\": false,\r\n                \"className\": 'select-checkbox',\r\n                \"targets\": [0],\r\n                \"data\": null,\r\n                \"defaultContent\": \"\"\r\n            },\r\n            {\r\n                \"data\": \"name\",\r\n                \"targets\": [1],\r\n                \"render\": function (data) {\r\n                    return '<a class=\"modal-opener\" href=\"#\">' + data + '</span></br>';\r\n                }\r\n            },\r\n            {\r\n                \"data\": \"type\",\r\n                \"targets\": [2],\r\n                \"render\": function (data, type, row) {\r\n                    if (data !== null && available_types.indexOf(data) <= -1) {\r\n                        available_types.push(data);\r\n                    }\r\n                    if (data !== null && data === 'CONST') {\r\n                        data = data + ' (' + row['const_val'] + ')';\r\n                    }\r\n                    return data;\r\n                }\r\n            },\r\n            {\r\n                \"data\": \"constraints\",\r\n                \"targets\": [3],\r\n                \"render\": function (data) {\r\n                    let result = '';\r\n\r\n                    $(data).each(function (id, name) {\r\n                        if (name.length > 0) {\r\n                            result += name;\r\n                        }\r\n                    });\r\n                    return result;\r\n                }\r\n            },\r\n            {\r\n                \"data\": \"tags\",\r\n                \"targets\": [4],\r\n                \"render\": function (data) {\r\n                    let result = '';\r\n\r\n                    $(data).each(function (id, name) {\r\n                        if (name.length > 0) {\r\n                            result += '<span class=\"badge bg-danger\">' + name +\r\n                                '</span>';\r\n                        }\r\n                    });\r\n                    return result;\r\n                }\r\n            },\r\n            {\r\n                \"data\": \"used_by\",\r\n                \"targets\": [5],\r\n                \"render\": function (data, type, row) {\r\n                    let result = '';\r\n                    let search_all = '';\r\n                    $(data).each(function (id, name) {\r\n                        if (name.length > 0 && !is_constraint_link(name)) {\r\n                            let search_query = '?command=search&col=2&q=%5C%22' + name + '%5C%22';\r\n                            result += '<span class=\"badge bg-info\">' +\r\n                                '<a href=\"./' + search_query + '\" target=\"_blank\" class=\"link-light\">' + name + '</a>' +\r\n                                '</span> ';\r\n                            if (search_all.length > 0) {\r\n                                /* ToDo: Simplify search query */\r\n                                search_all += '%3AOR%3A' + '%3ACOL_INDEX_02%3A' + '%5C%22' + name + '%5C%22';\r\n                            } else {\r\n                                search_all += search_query;\r\n                            }\r\n                        }\r\n                    });\r\n                    if (result.length < 1) {\r\n                        result += '<span class=\"badge bg-warning\">' +\r\n                            'unused' +\r\n                            '</span></br>';\r\n                    } else {\r\n                        if (data.length > 1) {\r\n                            result += '<span class=\"badge bg-info\">' +\r\n                                '<a href=\"./' + search_all + '\" target=\"_blank\" class=\"link-light\">Show all</a>' +\r\n                                '</span> ';\r\n                        }\r\n                    }\r\n                    return result;\r\n                }\r\n\r\n            },\r\n            {\r\n                \"data\": \"script_results\",\r\n                \"targets\": [6],\r\n                \"render\": function (data) {\r\n                    return data;\r\n                }\r\n            },\r\n            {\r\n                \"data\": \"used_by\",\r\n                \"targets\": [7],\r\n                \"visible\": false,\r\n                \"searchable\": false,\r\n                \"render\": function (data) {\r\n                    let result = '';\r\n                    $(data).each(function (id, name) {\r\n                        if (name.length > 0) {\r\n                            if (result.length > 1) {\r\n                                result += ', '\r\n                            }\r\n                            result += name;\r\n                        }\r\n                    });\r\n                    return result;\r\n                }\r\n            }\r\n        ],\r\n        infoCallback: function (settings, start, end, max, total) {\r\n            let api = this.api();\r\n            let pageInfo = api.page.info();\r\n\r\n            $('#clear-all-filters-text').html(\"Showing \" + total + \"/\" + pageInfo.recordsTotal + \". Clear all.\");\r\n\r\n            let result = \"Showing \" + start + \" to \" + end + \" of \" + total + \" entries\";\r\n            result += \" (filtered from \" + pageInfo.recordsTotal + \" total entries).\";\r\n\r\n            return result;\r\n        },\r\n        initComplete: function () {\r\n            $('#search_bar').val(var_search_string);\r\n            $('.variable_link').click(function (event) {\r\n                event.preventDefault();\r\n                load_variable(get_rowidx_by_var_name($(this).data('name')));\r\n            });\r\n\r\n            utils.process_url_query(get_query);\r\n            update_search();\r\n\r\n            // Enable Hanfor specific table filtering.\r\n            $.fn.dataTable.ext.search.push(\r\n                function (settings, data) {\r\n                    // data contains the row. data[0] is the content of the first column in the actual row.\r\n                    // Return true to include the row into the data. false to exclude.\r\n                    return evaluate_search(data);\r\n                }\r\n            );\r\n\r\n            this.api().draw();\r\n        }\r\n    });\r\n    variables_table.column(6).visible(false);\r\n    variables_table.column(7).visible(false);\r\n\r\n    new $.fn.dataTable.ColReorder(variables_table, {});\r\n\r\n    let search_bar = $('#search_bar');\r\n    // Init search Bar Autocomplete\r\n    new Awesomplete(search_bar[0], {\r\n        filter: function (text, input) {\r\n            let result = false;\r\n            // If we have an uneven number of \":\"\r\n            // We check if we have a match in the input tail starting from the last \":\"\r\n            if ((input.split(\":\").length - 1) % 2 === 1) {\r\n                result = Awesomplete.FILTER_CONTAINS(text, input.match(/[^:]*$/)[0]);\r\n            }\r\n            return result;\r\n        },\r\n        item: function (text, input) {\r\n            // Match inside \":\" enclosed item.\r\n            return Awesomplete.ITEM(text, input.match(/(:)([\\S]*$)/)[2]);\r\n        },\r\n        replace: function (text) {\r\n            // Cut of the tail starting from the last \":\" and replace by item text.\r\n            const before = this.input.value.match(/(.*)(:(?!.*:).*$)/)[1];\r\n            this.input.value = before + text;\r\n        },\r\n        list: search_autocomplete,\r\n        minChars: 1,\r\n        autoFirst: true\r\n    });\r\n\r\n    // Bind big custom searchbar to search the table.\r\n    search_bar.keypress(function (e) {\r\n        if (e.which === 13) { // Search on enter.\r\n            update_search();\r\n            variables_table.draw();\r\n        }\r\n    });\r\n\r\n    // Add listener for variable link to modal.\r\n    $('#variables_table  tbody').on('click', 'a.modal-opener', function (event) {\r\n        // prevent body to be scrolled to the top.\r\n        event.preventDefault();\r\n        let row_idx = variables_table.row($(event.target).parent()).index();\r\n        load_variable(row_idx);\r\n    });\r\n\r\n    // Store changes on variable on save.\r\n    $('#save_variable_modal').click(function () {\r\n        store_variable(variables_table);\r\n    });\r\n\r\n    $('#variable_type').on('keyup change autocompleteclose', function () {\r\n        if ($(this).val() === 'CONST') {\r\n            show_variable_val_input();\r\n        } else {\r\n            show_variable_val_input(true);\r\n        }\r\n        if ($(this).val() === 'ENUMERATOR_INT' || $(this).val() === 'ENUMERATOR_REAL') {\r\n            show_belongs_to_enum_input();\r\n            show_variable_val_input();\r\n        } else {\r\n            show_belongs_to_enum_input(true)\r\n        }\r\n        if ($(this).val() === 'ENUM_INT' || $(this).val() === 'ENUM_REAL') {\r\n            show_enumerators_in_modal();\r\n        } else {\r\n            show_enumerators_in_modal(true);\r\n        }\r\n    });\r\n\r\n    // Add listener for importing variables from existing sessions/revisions\r\n    $('.import_link').on('click', function () {\r\n        const sess_name = $(this).attr('data-name');\r\n        const sess_revision = $(this).attr('data-revision');\r\n\r\n        open_import_modal(sess_name, sess_revision);\r\n    });\r\n\r\n    $('#start_variable_import_session').click(function () {\r\n        start_import_session();\r\n    });\r\n\r\n    // Multiselect.\r\n    // Select single rows\r\n    $('.select-all-button').on('click', function () {\r\n        // Toggle selection on\r\n        if ($(this).hasClass('btn-secondary')) {\r\n            variables_table.rows({page: 'current'}).select();\r\n        } else { // Toggle selection off\r\n            variables_table.rows({page: 'current'}).deselect();\r\n        }\r\n        // Toggle button state.\r\n        $('.select-all-button').toggleClass('btn-secondary btn-primary');\r\n    });\r\n\r\n    // Toggle \"Select all rows to `off` on user specific selection.\"\r\n    variables_table.on('user-select', function () {\r\n        let select_buttons = $('.select-all-button');\r\n        select_buttons.removeClass('btn-primary');\r\n        select_buttons.addClass('btn-secondary ');\r\n    });\r\n\r\n    // Bind autocomplete for \"edit-selected\" types\r\n    $('#multi-change-type-input').autocomplete({\r\n        minLength: 0,\r\n        source: available_types,\r\n        delay: 100\r\n    }).on('focus', function () {\r\n        $(this).keydown();\r\n    }).val('');\r\n\r\n    $('.apply-multi-edit').click(function () {\r\n        apply_multi_edit(variables_table);\r\n    });\r\n\r\n    // Multi Delete variables.\r\n    // $('.delete_button').confirmation({\r\n    //     rootSelector: '.delete_button'\r\n    // }).click(function () {\r\n    //     apply_multi_edit(variables_table, true);\r\n    // });\r\n\r\n    $('body').on('click', '.delete_button', function () {\r\n        const element = $(this)\r\n\r\n        if (element.data('html') === undefined) {\r\n            element.outerWidth(element.outerWidth()).data('html', element.html()).html('Do it!')\r\n\r\n            setTimeout(function () {\r\n                element.html(element.data('html')).removeData('html').outerWidth('')\r\n            }, 2000)\r\n        } else {\r\n            element.html(element.data('html')).removeData('html').outerWidth('')\r\n            apply_multi_edit(variables_table, true)\r\n        }\r\n    })\r\n\r\n\r\n    // Add new Constraint\r\n    $('#add_constraint').click(function () {\r\n        add_constraint();\r\n    });\r\n\r\n    // Add new variable via modal.\r\n    $('#save_new_variable_modal').click(function () {\r\n        add_variable_via_modal();\r\n    });\r\n\r\n    // Add new enumerator from emum modal\r\n    $('#add_enumerator').click(function () {\r\n        add_enumerator_template('')\r\n    });\r\n\r\n    // Delete enumerator via the enum modal.\r\n    $('#enumerators').on('click', '.del_enum', function () {\r\n        const enumerator_name = $(this).attr('data-name');\r\n        const enum_name = $('#variable_name_old').val();\r\n        let enum_dom = $(this).parent('.enumerator-input');\r\n        if (enumerator_name.length === 0) {\r\n            enum_dom.remove();\r\n        } else {\r\n            delete_enumerator(enum_name, enumerator_name, enum_dom);\r\n        }\r\n    }).on('paste', '.enum_name_input', function (e) {\r\n        let pasted_text = e.originalEvent.clipboardData.getData('text');\r\n\r\n        if (has_smart_input_form(pasted_text)) {\r\n            console.log('has smart input form');\r\n            const smart_input_array = get_smart_input_array(pasted_text);\r\n            console.log(smart_input_array);\r\n            for (const line of smart_input_array) {\r\n                add_enumerator_template(line[0], line[1]);\r\n            }\r\n            e.preventDefault();\r\n        }\r\n    });\r\n\r\n    $('#generate_req').click(function () {\r\n        $('#generate_req_form').submit();\r\n    });\r\n\r\n    // Clear all applied searches.\r\n    $('.clear-all-filters').click(function () {\r\n        $('#search_bar').val('').effect(\"highlight\", {color: 'green'}, 500);\r\n        update_search();\r\n        variables_table.draw();\r\n    });\r\n\r\n    //$('#variable_new_vaiable_modal').on('show.bs.modal change', function () {\r\n    //    update_new_var_const_value_input();\r\n    //})\r\n    $('#variable_new_vaiable_modal')[0].addEventListener('show.bs.modal', function () {\r\n        update_new_var_const_value_input();\r\n    });\r\n    $('#new_variable_type').on('change', function () {\r\n        update_new_var_const_value_input();\r\n    });\r\n\r\n    $('#import-variables-from-csv-input').change(function () {\r\n        const file_reader = new FileReader()\r\n        file_reader.onload = function () {\r\n            $.ajax({\r\n                type: 'POST', url: 'api/var/import_csv', data: {\r\n                    variables_csv_str: file_reader.result\r\n                }, success: function (response) {\r\n                    if (response['success'] === false) {\r\n                        alert(response['errormsg'])\r\n                        return\r\n                    }\r\n\r\n                    location.reload();\r\n                }\r\n            })\r\n        }\r\n\r\n        file_reader.readAsText($('#import-variables-from-csv-input').prop('files')[0]);\r\n    })\r\n});\r\n\r\nfunction init_modal() {\r\n    let modal = $('#variable_modal')\r\n\r\n    modal[0].addEventListener('hide.bs.modal', function (event) {\r\n        modal_closing_routine(event);\r\n    })\r\n\r\n    $('#variable_name').change(function () {\r\n        $('#variable_modal').data('unsaved_changes', true);\r\n    })\r\n\r\n    $('#variable_type').change(function () {\r\n        $('#variable_modal').data('unsaved_changes', true);\r\n    })\r\n\r\n    $('#variable_value').change(function () {\r\n        $('#variable_modal').data('unsaved_changes', true);\r\n    })\r\n\r\n    $('#belongs_to_enum').change(function () {\r\n        $('#variable_modal').data('unsaved_changes', true);\r\n    })\r\n}\r\n\r\nfunction modal_closing_routine(event) {\r\n    const unsaved_changes = $('#variable_modal').data('unsaved_changes');\r\n    if (unsaved_changes === true) {\r\n        const force_close = confirm(\"You have unsaved changes, do you really want to close?\");\r\n        if (force_close !== true) {\r\n            event.preventDefault();\r\n        } else {\r\n            sendTelemetry(\"variables\", $('#variable_name_old').val(), \"close_without_save\")\r\n        }\r\n    } else {\r\n        sendTelemetry(\"variables\", $('#variable_name_old').val(), \"close\")\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://hanfor/./js/variables.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"variables": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkhanfor"] = self["webpackChunkhanfor"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["commons"], () => (__webpack_require__("./js/variables.js")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;