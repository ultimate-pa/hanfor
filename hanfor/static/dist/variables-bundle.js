/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/variables.js":
/*!*************************!*\
  !*** ./js/variables.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n__webpack_require__(/*! gasparesganga-jquery-loading-overlay */ \"./node_modules/gasparesganga-jquery-loading-overlay/src/loadingoverlay.js\");\n__webpack_require__(/*! bootstrap */ \"./node_modules/bootstrap/dist/js/bootstrap.js\");\n__webpack_require__(/*! bootstrap-confirmation2 */ \"./node_modules/bootstrap-confirmation2/dist/bootstrap-confirmation.js\");\n__webpack_require__(/*! datatables.net-bs4 */ \"./node_modules/datatables.net-bs4/js/dataTables.bootstrap4.js\");\n__webpack_require__(/*! datatables.net-select */ \"./node_modules/datatables.net-select/js/dataTables.select.js\");\n__webpack_require__(/*! jquery-ui/ui/widgets/autocomplete */ \"./node_modules/jquery-ui/ui/widgets/autocomplete.js\");\n__webpack_require__(/*! ./bootstrap-tokenfield.js */ \"./js/bootstrap-tokenfield.js\");\n__webpack_require__(/*! jquery-ui/ui/effects/effect-highlight */ \"./node_modules/jquery-ui/ui/effects/effect-highlight.js\");\n__webpack_require__(/*! awesomplete */ \"./node_modules/awesomplete/awesomplete.js\");\n__webpack_require__(/*! awesomplete/awesomplete.css */ \"./node_modules/awesomplete/awesomplete.css\");\n__webpack_require__(/*! ./colResizable-1.6.min.js */ \"./js/colResizable-1.6.min.js\");\nlet utils = __webpack_require__(/*! ./hanfor-utils */ \"./js/hanfor-utils.js\");\n\n// Globals\nlet available_types = ['CONST', 'ENUM_INT', 'ENUM_REAL'];\nlet search_autocomplete = [\n    \":AND:\",\n    \":OR:\",\n    \":NOT:\",\n    \":COL_INDEX_01:\",\n    \":COL_INDEX_02:\",\n    \":COL_INDEX_03:\",\n    \":COL_INDEX_04:\"\n];\nlet var_search_string = sessionStorage.getItem('var_search_string');\nlet type_inference_errors = [];\nconst {SearchNode} = __webpack_require__(/*! ./datatables-advanced-search.js */ \"./js/datatables-advanced-search.js\");\nlet search_tree = undefined;\nlet visible_columns = [true, true, true, true, true];\nlet get_query = JSON.parse(search_query); // search_query is set in layout.html\n\n\n/**\n * Apply search tree on datatables data.\n * @param data\n * @returns {bool|XPathResult}\n */\nfunction evaluate_search(data) {\n    return search_tree.evaluate(data, visible_columns);\n}\n\n/**\n * Update the search expression tree.\n */\nfunction update_search() {\n    var_search_string = $('#search_bar').val().trim();\n    sessionStorage.setItem('var_search_string', var_search_string);\n    search_tree = SearchNode.fromQuery(var_search_string);\n}\n\n/**\n * Store the currently active (in the modal) variable.\n * @param variables_table\n */\nfunction store_variable(variables_table) {\n    let var_modal_content = $('.modal-content');\n    var_modal_content.LoadingOverlay('show');\n\n    // Get data.\n    const var_name = $('#variable_name').val();\n    const var_name_old = $('#variable_name_old').val();\n    const var_type = $('#variable_type').val();\n    const var_type_old = $('#variable_type_old').val();\n    const associated_row_id = parseInt($('#modal_associated_row_index').val());\n    const occurrences = $('#occurences').val();\n    const const_val = $('#variable_value').val();\n    const const_val_old = $('#variable_value_old').val();\n    const updated_constraints = $('#variable_constraint_updated').val();\n    const belongs_to_enum = $('#belongs_to_enum').val();\n    const belongs_to_enum_old = $('#belongs_to_enum_old').val();\n\n    // Fetch the constraints\n    let constraints = {};\n    $('.formalization_card').each(function () {\n        // Scope and Pattern\n        let constraint = {};\n        constraint['id'] = $(this).attr('title');\n        $(this).find('select').each(function () {\n            if ($(this).hasClass('scope_selector')) {\n                constraint['scope'] = $(this).val();\n            }\n            if ($(this).hasClass('pattern_selector')) {\n                constraint['pattern'] = $(this).val();\n            }\n        });\n\n        // Expressions\n        constraint['expression_mapping'] = {};\n        $(this).find(\"textarea.reqirement-variable\").each(function () {\n            if ($(this).attr('title') !== '')\n                constraint['expression_mapping'][$(this).attr('title')] = $(this).val();\n        });\n\n        constraints[constraint['id']] = constraint;\n    });\n\n    // Update available types.\n    if (var_type !== null && available_types.indexOf(var_type) <= -1) {\n        available_types.push(var_type);\n    }\n\n    // Process enumerators in case we have an enum\n    let enumerators = [];\n    if ((var_type === 'ENUM_INT') || (var_type === 'ENUM_REAL')) {\n        // Fetch enumerators.\n        $('.enumerator-input').each(function () {\n            let enum_name = $(this).find('.enum_name_input').val();\n            let enum_value = $(this).find('.enum_value_input').val();\n            enumerators.push([enum_name, enum_value]);\n        });\n    }\n\n    // Store the variable.\n    $.post(\"api/var/update\",\n        {\n            name: var_name,\n            name_old: var_name_old,\n            type: var_type,\n            const_val: const_val,\n            const_val_old: const_val_old,\n            type_old: var_type_old,\n            occurrences: occurrences,\n            constraints: JSON.stringify(constraints),\n            updated_constraints: updated_constraints,\n            enumerators: JSON.stringify(enumerators),\n            belongs_to_enum: belongs_to_enum,\n            belongs_to_enum_old: belongs_to_enum_old\n        },\n        // Update var table on success or show an error message.\n        function (data) {\n            var_modal_content.LoadingOverlay('hide', true);\n            if (data['success'] === false) {\n                alert(data['errormsg']);\n            } else {\n                if (data.rebuild_table) {\n                    location.reload();\n                } else {\n                    variables_table.row(associated_row_id).data(data.data).draw();\n                    $('#variable_modal').modal('hide');\n                }\n            }\n        });\n}\n\n/**\n * Start a new import session (redirect to the session on success).\n */\nfunction start_import_session() {\n    let variable_import_modal = $('#variable_import_modal');\n    let sess_name = $('#variable_import_sess_name').val();\n    let sess_revision = $('#variable_import_sess_revision').val();\n\n    variable_import_modal.LoadingOverlay('show');\n\n    $.post(\"api/var/start_import_session\",\n        {\n            sess_name: sess_name,\n            sess_revision: sess_revision\n        },\n        function (data) {\n            variable_import_modal.LoadingOverlay('hide', true);\n            if (data['success'] === false) {\n                alert(data['errormsg']);\n            } else {\n                window.location.href = base_url + \"variable_import/\" + data['session_id'];\n            }\n        });\n}\n\n\n/**\n * Open modal for the user to trigger variable import.\n * @param sess_name\n * @param sess_revision\n */\nfunction open_import_modal(sess_name, sess_revision) {\n    // Prepare requirement Modal\n    let variable_import_modal = $('#variable_import_modal');\n    $('#variable_import_sess_name').val(sess_name);\n    $('#variable_import_sess_revision').val(sess_revision);\n    $('#variable_import_modal_title').html('Import from Session: ' + sess_name + ' at: ' + sess_revision);\n\n    variable_import_modal.modal('show');\n\n    // Load informations about selected var collection\n    variable_import_modal.LoadingOverlay('show');\n    $.post(\"api/var/var_import_info\",\n        {\n            sess_name: sess_name,\n            sess_revision: sess_revision\n        },\n        function (data) {\n            variable_import_modal.LoadingOverlay('hide', true);\n            if (data['success'] === false) {\n                alert(data['errormsg']);\n            } else {\n                $('#import_tot_number').html('Total:\\t' + data['tot_vars'] + ' Variables.');\n                $('#import_new_number').html('New:\\t' + data['new_vars'] + ' Variables.');\n            }\n        });\n}\n\n\n/**\n * Apply multi edit on selected variables.\n * @param variables_table\n * @param del\n */\nfunction apply_multi_edit(variables_table, del = false) {\n    let page = $('body');\n    page.LoadingOverlay('show');\n    let change_type = $('#multi-change-type-input').val().trim();\n    let selected_vars = [];\n    variables_table.rows({selected: true}).every(function () {\n        let d = this.data();\n        selected_vars.push(d['name']);\n    });\n\n    // Update selected vars.\n    $.post(\"api/var/multi_update\",\n        {\n            change_type: change_type,\n            selected_vars: JSON.stringify(selected_vars),\n            del: del\n        },\n        // Update requirements table on success or show an error message.\n        function (data) {\n            page.LoadingOverlay('hide', true);\n            if (data['success'] === false) {\n                alert(data['errormsg']);\n            } else {\n                location.reload();\n            }\n        });\n}\n\n\n/**\n * Enable/disable the active variables (P, Q, R, ...) in the requirement modal based on scope and pattern.\n */\nfunction update_displayed_constraint_inputs() {\n    $('.requirement_var_group').each(function () {\n        $(this).hide();\n    });\n\n    $('.formalization_card').each(function () {\n        // Fetch attributes\n        const formalization_id = $(this).attr('title');\n        const selected_scope = $('#requirement_scope' + formalization_id).val();\n        const selected_pattern = $('#requirement_pattern' + formalization_id).val();\n        let var_p = $('#requirement_var_group_p' + formalization_id);\n        let var_q = $('#requirement_var_group_q' + formalization_id);\n        let var_r = $('#requirement_var_group_r' + formalization_id);\n        let var_s = $('#requirement_var_group_s' + formalization_id);\n        let var_t = $('#requirement_var_group_t' + formalization_id);\n        let var_u = $('#requirement_var_group_u' + formalization_id);\n        let var_v = $('#requirement_var_group_v' + formalization_id);\n\n        switch (selected_scope) {\n            case 'BEFORE':\n            case 'AFTER':\n                var_p.show();\n                break;\n            case 'BETWEEN':\n            case 'AFTER_UNTIL':\n                var_p.show();\n                var_q.show();\n                break;\n            default:\n                break;\n        }\n\n        Object.keys(_PATTERNS[selected_pattern]['env']).forEach(function (key) {\n            switch (key) {\n                case 'R': var_r.show(); break;\n                case 'S': var_s.show(); break;\n                case 'T': var_t.show(); break;\n                case 'U': var_u.show(); break;\n                case 'V': var_v.show(); break;\n            }\n        });\n    });\n}\n\n\n/**\n * Updates the formalization textarea based on the selected scope and expressions in P, Q, R, S, T, U, V.\n */\nfunction update_formalization() {\n    $('.formalization_card').each(function () {\n        // Fetch attributes\n        const formalization_id = $(this).attr('title');\n\n        let formalization = '';\n        const selected_scope = $('#requirement_scope' + formalization_id).find('option:selected').text().replace(/\\s\\s+/g, ' ');\n        const selected_pattern = $('#requirement_pattern' + formalization_id).find('option:selected').text().replace(/\\s\\s+/g, ' ');\n\n        if (selected_scope !== 'None' && selected_pattern !== 'None') {\n            formalization = selected_scope + ', ' + selected_pattern + '.';\n        }\n\n        // Update formalization with variables.\n        let var_p = $('#formalization_var_p' + formalization_id).val();\n        let var_q = $('#formalization_var_q' + formalization_id).val();\n        let var_r = $('#formalization_var_r' + formalization_id).val();\n        let var_s = $('#formalization_var_s' + formalization_id).val();\n        let var_t = $('#formalization_var_t' + formalization_id).val();\n        let var_u = $('#formalization_var_u' + formalization_id).val();\n        let var_v = $('#formalization_var_v' + formalization_id).val();\n\n        if (var_p.length > 0) {\n            formalization = formalization.replace(/{P}/g, var_p);\n        }\n        if (var_q.length > 0) {\n            formalization = formalization.replace(/{Q}/g, var_q);\n        }\n        if (var_r.length > 0) {\n            formalization = formalization.replace(/{R}/g, var_r);\n        }\n        if (var_s.length > 0) {\n            formalization = formalization.replace(/{S}/g, var_s);\n        }\n        if (var_t.length > 0) {\n            formalization = formalization.replace(/{T}/g, var_t);\n        }\n        if (var_u.length > 0) {\n            formalization = formalization.replace(/{U}/g, var_u);\n        }\n        if (var_v.length > 0) {\n            formalization = formalization.replace(/{V}/g, var_v);\n        }\n\n        $('#current_formalization_textarea' + formalization_id).val(formalization);\n\n        // Update visual representation of type inference errors.\n        let header = $('#formalization_heading' + formalization_id);\n        if (formalization_id in type_inference_errors) {\n            for (let i = 0; i < type_inference_errors[formalization_id].length; i++) {\n                $('#formalization_var_' + type_inference_errors[formalization_id][i] + formalization_id)\n                    .addClass('type-error');\n                header.addClass('type-error-head');\n            }\n        } else {\n            header.removeClass('type-error-head');\n        }\n    });\n    $('#variable_constraint_updated').val('true');\n}\n\n\nfunction delete_constraint(constraint_id) {\n    let requirement_modal_content = $('.modal-content');\n    requirement_modal_content.LoadingOverlay('show');\n    const var_name = $('#variable_name').val();\n    $.post(\"api/var/del_constraint\",\n        {\n            name: var_name,\n            constraint_id: constraint_id\n        },\n        function (data) {\n            requirement_modal_content.LoadingOverlay('hide', true);\n            if (data['success'] === false) {\n                alert(data['errormsg']);\n            } else {\n                $('#formalization_accordion').html(data['html']);\n            }\n        }).done(function () {\n        update_displayed_constraint_inputs();\n        update_formalization();\n        bind_expression_buttons();\n    });\n}\n\n\nfunction bind_expression_buttons() {\n    $('.formalization_selector').change(function () {\n        update_displayed_constraint_inputs();\n        update_formalization();\n    });\n    $('.reqirement-variable, .req_var_type').change(function () {\n        update_formalization();\n    });\n    $('.delete_formalization').confirmation({\n        rootSelector: '.delete_formalization'\n    }).click(function () {\n        delete_constraint($(this).attr('name'));\n    });\n}\n\n\nfunction add_constraint() {\n    // Request a new Constraint/Formalization. And add its edit elements to the modal.\n    let var_modal_content = $('.modal-content');\n    var_modal_content.LoadingOverlay('show');\n\n    // Get data.\n    const var_name = $('#variable_name').val();\n\n    // Store the variable.\n    $.post(\"api/var/new_constraint\",\n        {\n            name: var_name\n        },\n        // Update var table on success or show an error message.\n        function (data) {\n            var_modal_content.LoadingOverlay('hide', true);\n            if (data['success'] === false) {\n                alert(data['errormsg']);\n            } else {\n                $('#formalization_accordion').html(data['html']);\n            }\n        }).done(function () {\n        update_displayed_constraint_inputs();\n        update_formalization();\n        bind_expression_buttons();\n    });\n}\n\n\nfunction get_variable_constraints_html(var_name) {\n    $.post(\"api/var/get_constraints_html\",\n        {\n            name: var_name\n        },\n        function (data) {\n            if (data['success'] === false) {\n                alert(data['errormsg']);\n            } else {\n                type_inference_errors = data.type_inference_errors;\n                $('#formalization_accordion').html(data['html']);\n            }\n        }).done(function () {\n        update_displayed_constraint_inputs();\n        update_formalization();\n        bind_expression_buttons();\n    });\n}\n\n\nfunction is_constraint_link(name) {\n    const regex = /^(Constraint_)(.*)(_[0-9]+$)/gm;\n    let result = null;\n    let match = regex.exec(name);\n\n    if (match !== null) {\n        result = match[2];\n    }\n\n    return result\n}\n\n/**\n * Find the datatable row index for a variable by its name.\n * @param {number} name the requirement id.\n * @returns {number} row_index the datatables row index.\n */\nfunction get_rowidx_by_var_name(name) {\n    let variables_table = $('#variables_table').DataTable();\n    let result = -1;\n    variables_table\n        .row(function (idx, data) {\n            if (data.name === name) {\n                result = idx;\n            }\n        });\n\n    return result;\n}\n\n\n/**\n * Show / Hide Value CONST value input for variables.\n * @param revert\n */\nfunction show_variable_val_input(revert) {\n    if (revert === true) {\n        $('#variable_value_form_group').hide();\n    } else {\n        $('#variable_value_form_group').show();\n    }\n}\n\n\nfunction show_belongs_to_enum_input(revert = false) {\n    if (revert === true) {\n        $('#variable_belongs_to_form_group').hide();\n    } else {\n        $('#variable_belongs_to_form_group').show();\n    }\n}\n\nfunction show_enumerators_in_modal(revert = false) {\n    if (revert === true) {\n        $('.enum-controls').hide();\n    } else {\n        $('.enum-controls').show();\n    }\n}\n\n\nfunction load_enumerators_to_modal(var_name) {\n    $.post(\"api/var/get_enumerators\",\n        {\n            name: var_name\n        },\n        function (data) {\n            if (data['success'] === false) {\n                alert(data['errormsg']);\n            } else {\n                // Remove prefix from Enumerators for display.\n                $.each(data['enumerators'], function (index, item) {\n                    const stripped_name = item[0].substr(var_name.length + 1);\n                    add_enumerator_template(stripped_name, item[1]);\n                })\n            }\n        }).done(function () {\n        update_displayed_constraint_inputs();\n        update_formalization();\n        bind_expression_buttons();\n    });\n}\n\n\nfunction load_variable(row_idx) {\n    // Get row data\n    let data = $('#variables_table').DataTable().row(row_idx).data();\n\n    // Prepare requirement Modal\n    let var_modal_content = $('.modal-content');\n    show_variable_val_input(true);\n    show_enumerators_in_modal(true);\n    show_belongs_to_enum_input(true);\n    $('#variable_modal').modal('show');\n\n    // Meta information\n    $('#modal_associated_row_index').val(row_idx);\n    $('#variable_name_old').val(data.name);\n    $('#variable_type_old').val(data.type);\n    $('#occurences').val(data.used_by);\n\n    // Visible information\n    $('#variable_modal_title').html('Variable: ' + data.name);\n    $('#variable_name').val(data.name);\n\n    let type_input = $('#variable_type');\n    let variable_value = $('#variable_value');\n    let variable_value_old = $('#variable_value_old');\n    let belongs_to_enum = $('#belongs_to_enum');\n    let belongs_to_enum_old = $('#belongs_to_enum_old');\n    let enumerators = $('#enumerators');\n\n    type_input.val(data.type);\n    variable_value.val('');\n    variable_value_old.val('');\n    belongs_to_enum.val('');\n    belongs_to_enum_old.val('');\n    enumerators.html('');\n\n    if (data.type === 'CONST' || data.type === 'ENUMERATOR_INT' || data.type === 'ENUMERATOR_REAL') {\n        show_variable_val_input();\n        variable_value.val(data.const_val);\n        variable_value_old.val(data.const_val);\n    }\n    if (data.type === 'ENUMERATOR_INT' || data.type === 'ENUMERATOR_REAL') {\n        show_belongs_to_enum_input();\n        belongs_to_enum.val(data.belongs_to_enum);\n        belongs_to_enum_old.val(data.belongs_to_enum);\n    }\n    if (data.type === 'ENUM_REAL' || data.type === 'ENUM_INT') {\n        show_enumerators_in_modal();\n        load_enumerators_to_modal(data.name);\n    }\n\n    type_input.autocomplete({\n        minLength: 0,\n        source: available_types\n    }).on('focus', function () {\n        $(this).keydown();\n    });\n\n    // Load constraints\n    get_variable_constraints_html(data.name);\n\n    var_modal_content.LoadingOverlay('hide');\n}\n\n\nfunction add_variable_via_modal() {\n    const new_variable_name = $('#new_variable_name').val();\n    const new_variable_type = $('#new_variable_type').val();\n    const new_variable_value = $('#new_variable_const_value').val();\n    $.post(\"api/var/add_new_variable\",\n        {\n            name: new_variable_name,\n            type: new_variable_type,\n            value: new_variable_value\n        },\n        function (data) {\n            if (data['success'] === false) {\n                alert(data['errormsg']);\n            } else {\n                location.reload();\n            }\n        });\n}\n\n\nfunction add_enumerator_template(name, value) {\n    const enumerator_template = `\n        <div class=\"input-group enumerator-input\">\n            <span class=\"input-group-prepend input-group-text\">Name</span>\n            <input class=\"form-control enum_name_input\" type=\"text\" value=\"${name}\">\n            <span class=\"input-group-prepend input-group-text\">Value</span>\n            <input class=\"form-control enum_value_input\" type=\"number\" step=\"any\" value=\"${value}\">\n            <buttton type=\"button\" class=\"btn btn-danger input-group-append del_enum\" data-name=\"${name}\">Delete</buttton>\n        </div>`;\n    $('#enumerators').append(enumerator_template);\n}\n\n\nfunction delete_enumerator(enum_name, enumerator_name, enum_dom) {\n    let var_modal = $('#variable_modal');\n    var_modal.LoadingOverlay('show');\n    $.post(\"api/var/del_var\",\n        {\n            name: enum_name + '_' + enumerator_name\n        },\n        function (data) {\n            var_modal.LoadingOverlay('hide', true);\n            if (data['success'] === false) {\n                alert(data['errormsg']);\n            } else {\n                enum_dom.remove();\n            }\n        });\n}\n\n\n/**\n * Test if pasted_text has the form:\n * foo<TAB>12\n * bar<TAB>42\n *\n * @param pasted_text\n * @returns {boolean}\n */\nfunction has_smart_input_form(pasted_text) {\n    const array_of_lines = pasted_text.match(/[^\\r\\n]+/g);\n    if (array_of_lines.length <= 0) {\n        return false;\n    }\n\n    for (const line of array_of_lines) {\n        const line_splits = line.match(/[^\\t]+/g);\n        if (line_splits.length !== 2) {\n            return false;\n        }\n        if (isNaN(line_splits[1])) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n/**\n * Create a 2D array from input like\n *   foo<TAB>12\n *   bar<TAB>42\n *\n *  -> [[foo, 12], [bar, 42]]\n * @param pasted_text\n * @returns {Array}\n */\nfunction get_smart_input_array(pasted_text) {\n    const array_of_lines = pasted_text.match(/[^\\r\\n]+/g);\n    let result = [];\n    for (const line of array_of_lines) {\n        const line_splits = line.match(/[^\\t]+/g);\n        result.push([line_splits[0], line_splits[1]]);\n    }\n    return result;\n}\n\n\n/**\n * Show the value input for new consts if type CONST is selected.\n */\nfunction update_new_var_const_value_input() {\n    const current_type = $('#new_variable_type').val();\n    let value_input = $('#new_variable_const_input');\n    current_type === 'CONST' ? value_input.show() : value_input.hide();\n}\n\n\n$(document).ready(function () {\n    // Prepare and load the variables table.\n    let variables_table = $('#variables_table').DataTable({\n        \"paging\": true,\n        \"stateSave\": true,\n        \"select\": {\n            style: 'os',\n            selector: 'td:first-child'\n        },\n        \"pageLength\": 50,\n        \"responsive\": true,\n        \"lengthMenu\": [[10, 50, 100, 500, -1], [10, 50, 100, 500, \"All\"]],\n        \"dom\": 'rt<\"container\"<\"row\"<\"col-md-6\"li><\"col-md-6\"p>>>',\n        \"ajax\": \"api/var/gets\",\n        \"deferRender\": true,\n        \"columns\": [\n            {\n                \"orderable\": false,\n                \"className\": 'select-checkbox',\n                \"targets\": [0],\n                \"data\": null,\n                \"defaultContent\": \"\"\n            },\n            {\n                \"data\": \"name\",\n                \"targets\": [1],\n                \"render\": function (data) {\n                    return '<a class=\"modal-opener\" href=\"#\">' + data + '</span></br>';\n                }\n            },\n            {\n                \"data\": \"type\",\n                \"targets\": [2],\n                \"render\": function (data, type, row) {\n                    if (data !== null && available_types.indexOf(data) <= -1) {\n                        available_types.push(data);\n                    }\n                    if (data !== null && data === 'CONST') {\n                        data = data + ' (' + row['const_val'] + ')';\n                    }\n                    return data;\n                }\n            },\n            {\n                \"data\": \"used_by\",\n                \"targets\": [3],\n                \"render\": function (data, type, row) {\n                    let result = '';\n                    let search_all = '';\n                    if ($.inArray('Type_inference_error', row.tags) > -1) {\n                        result += '<span class=\"badge badge-danger\">' +\n                            '<a href=\"#\" class=\"variable_link\" ' +\n                            'data-name=\"' + row.name + '\" >Has type inference error</a>' +\n                            '</span> ';\n                    }\n                    $(data).each(function (id, name) {\n                        if (name.length > 0) {\n                            let constraint_parent = is_constraint_link(name);\n                            if (constraint_parent !== null) {\n                                result += '<span class=\"badge badge-success\">' +\n                                    '<a href=\"#\" class=\"variable_link\" ' +\n                                    'data-name=\"' + constraint_parent + '\" >' + name + '</a>' +\n                                    '</span> ';\n                            } else {\n                                let search_query = '?command=search&col=2&q=%5C%22' + name + '%5C%22';\n                                result += '<span class=\"badge badge-info\">' +\n                                    '<a href=\"./' + search_query + '\" target=\"_blank\">' + name + '</a>' +\n                                    '</span> ';\n                                if (search_all.length > 0) {\n                                    search_all += '%3AOR%3A%5C%22' + name + '%5C%22';\n                                } else {\n                                    search_all += '?command=search&col=2&q=%5C%22' + name + '%5C%22';\n                                }\n                            }\n                        }\n                    });\n                    if (result.length < 1) {\n                        result += '<span class=\"badge badge-warning\">' +\n                            '<a href=\"#\">Not used</a>' +\n                            '</span></br>';\n                    } else {\n                        if (data.length > 1) {\n                            result += '<span class=\"badge badge-info\" style=\"background-color: #4275d8\">' +\n                                '<a href=\"./' + search_all + '\" target=\"_blank\">Show all</a>' +\n                                '</span> ';\n                        }\n                    }\n                    return result;\n                }\n\n            },\n            {\n                \"data\": \"script_results\",\n                \"targets\": [4],\n                \"render\": function (data) {\n                    return data;\n                }\n            },\n            {\n                \"data\": \"used_by\",\n                \"targets\": [5],\n                \"visible\": false,\n                \"searchable\": false,\n                \"render\": function (data) {\n                    let result = '';\n                    $(data).each(function (id, name) {\n                        if (name.length > 0) {\n                            if (result.length > 1) {\n                                result += ', '\n                            }\n                            result += name;\n                        }\n                    });\n                    return result;\n                }\n            }\n        ],\n        infoCallback: function (settings, start, end, max, total) {\n            let api = this.api();\n            let pageInfo = api.page.info();\n\n            $('#clear-all-filters-text').html(\"Showing \" + total + \"/\" + pageInfo.recordsTotal + \". Clear all.\");\n\n            let result = \"Showing \" + start + \" to \" + end + \" of \" + total + \" entries\";\n            result += \" (filtered from \" + pageInfo.recordsTotal + \" total entries).\";\n\n            return result;\n        },\n        initComplete: function () {\n            $('#search_bar').val(var_search_string);\n            $('.variable_link').click(function (event) {\n                event.preventDefault();\n                load_variable(get_rowidx_by_var_name($(this).data('name')));\n            });\n\n            utils.process_url_query(get_query);\n            update_search();\n\n            // Enable Hanfor specific table filtering.\n            $.fn.dataTable.ext.search.push(\n                function (settings, data) {\n                    // data contains the row. data[0] is the content of the first column in the actual row.\n                    // Return true to include the row into the data. false to exclude.\n                    return evaluate_search(data);\n                }\n            );\n\n            this.api().draw();\n            $('#variables_table').colResizable({\n                liveDrag: true,\n                postbackSafe: true\n            });\n        }\n    });\n    variables_table.column(4).visible(true);\n    variables_table.column(5).visible(false);\n\n    let search_bar = $('#search_bar');\n    // Init search Bar Autocomplete\n    new Awesomplete(search_bar[0], {\n        filter: function (text, input) {\n            let result = false;\n            // If we have an uneven number of \":\"\n            // We check if we have a match in the input tail starting from the last \":\"\n            if ((input.split(\":\").length - 1) % 2 === 1) {\n                result = Awesomplete.FILTER_CONTAINS(text, input.match(/[^:]*$/)[0]);\n            }\n            return result;\n        },\n        item: function (text, input) {\n            // Match inside \":\" enclosed item.\n            return Awesomplete.ITEM(text, input.match(/(:)([\\S]*$)/)[2]);\n        },\n        replace: function (text) {\n            // Cut of the tail starting from the last \":\" and replace by item text.\n            const before = this.input.value.match(/(.*)(:(?!.*:).*$)/)[1];\n            this.input.value = before + text;\n        },\n        list: search_autocomplete,\n        minChars: 1,\n        autoFirst: true\n    });\n\n    // Bind big custom searchbar to search the table.\n    search_bar.keypress(function (e) {\n        if (e.which === 13) { // Search on enter.\n            update_search();\n            variables_table.draw();\n        }\n    });\n\n    // Add listener for variable link to modal.\n    $('#variables_table  tbody').on('click', 'a.modal-opener', function (event) {\n        // prevent body to be scrolled to the top.\n        event.preventDefault();\n        let row_idx = variables_table.row($(event.target).parent()).index();\n        load_variable(row_idx);\n    });\n\n    // Store changes on variable on save.\n    $('#save_variable_modal').click(function () {\n        store_variable(variables_table);\n    });\n\n    $('#variable_type').on('keyup change autocompleteclose', function () {\n        if ($(this).val() === 'CONST') {\n            show_variable_val_input();\n        } else {\n            show_variable_val_input(true);\n        }\n        if ($(this).val() === 'ENUMERATOR_INT' || $(this).val() === 'ENUMERATOR_REAL') {\n            show_belongs_to_enum_input();\n            show_variable_val_input();\n        } else {\n            show_belongs_to_enum_input(true)\n        }\n        if ($(this).val() === 'ENUM_INT' || $(this).val() === 'ENUM_REAL') {\n            show_enumerators_in_modal();\n        } else {\n            show_enumerators_in_modal(true);\n        }\n    });\n\n    // Add listener for importing variables from existing sessions/revisions\n    $('.import_link').on('click', function () {\n        const sess_name = $(this).attr('data-name');\n        const sess_revision = $(this).attr('data-revision');\n\n        open_import_modal(sess_name, sess_revision);\n    });\n\n    $('#start_variable_import_session').click(function () {\n        start_import_session();\n    });\n\n    // Multiselect.\n    // Select single rows\n    $('.select-all-button').on('click', function () {\n        // Toggle selection on\n        if ($(this).hasClass('btn-secondary')) {\n            variables_table.rows({page: 'current'}).select();\n        } else { // Toggle selection off\n            variables_table.rows({page: 'current'}).deselect();\n        }\n        // Toggle button state.\n        $('.select-all-button').toggleClass('btn-secondary btn-primary');\n    });\n\n    // Toggle \"Select all rows to `off` on user specific selection.\"\n    variables_table.on('user-select', function () {\n        let select_buttons = $('.select-all-button');\n        select_buttons.removeClass('btn-primary');\n        select_buttons.addClass('btn-secondary ');\n    });\n\n    // Bind autocomplete for \"edit-selected\" types\n    $('#multi-change-type-input').autocomplete({\n        minLength: 0,\n        source: available_types,\n        delay: 100\n    }).on('focus', function () {\n        $(this).keydown();\n    }).val('');\n\n    $('.apply-multi-edit').click(function () {\n        apply_multi_edit(variables_table);\n    });\n\n    // Multi Delete variables.\n    $('.delete_button').confirmation({\n        rootSelector: '.delete_button'\n    }).click(function () {\n        apply_multi_edit(variables_table, true);\n    });\n\n    // Add new Constraint\n    $('#add_constraint').click(function () {\n        add_constraint();\n    });\n\n    // Add new variable via modal.\n    $('#save_new_variable_modal').click(function () {\n        add_variable_via_modal();\n    });\n\n    // Add new enumerator from emum modal\n    $('#add_enumerator').click(function () {\n        add_enumerator_template('');\n    });\n\n    // Delete enumerator via the enum modal.\n    $('#enumerators').on('click', '.del_enum', function () {\n        const enumerator_name = $(this).attr('data-name');\n        const enum_name = $('#variable_name_old').val();\n        let enum_dom = $(this).parent('.enumerator-input');\n        if (enumerator_name.length === 0) {\n            enum_dom.remove();\n        } else {\n            delete_enumerator(enum_name, enumerator_name, enum_dom);\n        }\n    }).on('paste', '.enum_name_input', function (e) {\n        let pasted_text = e.originalEvent.clipboardData.getData('text');\n\n        if (has_smart_input_form(pasted_text)) {\n            console.log('has smart input form');\n            const smart_input_array = get_smart_input_array(pasted_text);\n            console.log(smart_input_array);\n            for (const line of smart_input_array) {\n                add_enumerator_template(line[0], line[1]);\n            }\n            e.preventDefault();\n        }\n    });\n\n    $('#generate_req').click(function () {\n        $('#generate_req_form').submit();\n    });\n\n    // Clear all applied searches.\n    $('.clear-all-filters').click(function () {\n        $('#search_bar').val('').effect(\"highlight\", {color: 'green'}, 500);\n        update_search();\n        variables_table.draw();\n    });\n\n    $('#variable_new_vaiable_modal').on('show.bs.modal change', function () {\n        update_new_var_const_value_input();\n    })\n});\n\n\n//# sourceURL=webpack://hanfor/./js/variables.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"variables": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkhanfor"] = self["webpackChunkhanfor"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["commons"], () => (__webpack_require__("./js/variables.js")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;