{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to the Hanfor Documentation","text":"<p>Hanfor is a tool that helps analyzing and formalizing requirements.</p> <p>To get a short overview about our tool have a look at our intoductory page.</p>"},{"location":"index.html#getting-started","title":"Getting Started","text":"<p>If you are new to Hanfor, begin with the installation guide and have a look at the preliminaries, the configuration and the quick start section.</p>"},{"location":"index.html#using-hanfor","title":"Using Hanfor","text":"<p>The usage section provides some information about the workflow of Hanfor, API queries and the handling of requirements. If you wish to find out more about the different patterns that are supported by Hanfor, have a look at the patterns section.</p>"},{"location":"index.html#contents","title":"Contents","text":"<ul> <li>Introduction<ul> <li>What is Hanfor?</li> </ul> </li> <li>Installation<ul> <li>Preliminaries</li> <li>Configuration</li> <li>Quick start</li> </ul> </li> <li>Usage<ul> <li>API Queries</li> <li>FAQ</li> <li>Requirements</li> <li>Workflow</li> </ul> </li> <li>References<ul> <li>Duration Calculus</li> <li>Phase Event Automata</li> <li>Patterns</li> <li>Publications</li> </ul> </li> <li>Contribute<ul> <li>Hanfor</li> <li>Docs</li> </ul> </li> <li>Contact<ul> <li>Contact</li> </ul> </li> </ul>"},{"location":"contact/contact.html","title":"Contact","text":"<p>Most Hanfor developers are students and researchers in the software engineering group of Andreas Podelski at the University of Freiburg.</p> <p>If you have any questions, open a GitHub issue or write a mail to</p> <ul> <li>Daniel Dietsch - dietsch@informatik.uni-freiburg.de</li> <li>Vincent Langenfeld - langenfv@informatik.uni-freiburg.de</li> </ul>"},{"location":"contribute/to_docs.html","title":"To docs","text":"<p>These are the source files for the Hanfor Documentation.</p>"},{"location":"contribute/to_docs.html#contribute-to-this-documentation","title":"Contribute to this Documentation.","text":""},{"location":"contribute/to_docs.html#0-optional-setup-a-virtual-environment","title":"0. (Optional) setup a virtual environment","text":"Linux Windows <pre><code>$ cd hanfor/documentation\n$ python3 -m venv venv\n$ source venv/bin/activate\n</code></pre> <pre><code>$ cd hanfor\\documentation\n$ python3 -m venv venv\n$ venv\\Scripts\\activate.bat\n</code></pre>"},{"location":"contribute/to_docs.html#1-install-mkdocs-and-all-dependencies","title":"1. Install MkDocs and all dependencies.","text":"<pre><code>$ pip3 install -r requirements.txt\n</code></pre>"},{"location":"contribute/to_docs.html#2-serve-this-documentation-locally-to-track-your-changes","title":"2. Serve this Documentation locally to track your changes.","text":"Linux Windows <pre><code>$ cd hanfor/documentation\n$ mkdocs serve\n</code></pre> <pre><code>$ cd hanfor\\documentation\n$ mkdocs serve\n</code></pre> <p>Open your Browser at http://127.0.0.1:8000/.</p>"},{"location":"contribute/to_docs.html#3-publish-your-changes-to-the-staging-directory","title":"3. Publish your changes to the staging directory.","text":"<pre><code>$ mkdocs gh-deploy --remote-branch gh-pages-staging\n</code></pre> <p>This will build the Documentation and commit them to the <code>gh-pages-staging</code> branch and push the <code>gh-pages-staging</code> branch to GitHub. If you have the necessary rights, you can then see the results on https://struebli.informatik.uni-freiburg.de/hanfor-docs-staging.</p>"},{"location":"contribute/to_docs.html#4-publish-your-changes-to-the-live-directory","title":"4. Publish your changes to the live directory","text":"<pre><code>$ mkdocs gh-deploy\n</code></pre> <p>This will build the Documentation and commit them to the <code>gh-pages</code> branch and push the <code>gh-pages</code> branch to GitHub. They will then be immediately available to the world at https://ultimate-pa.github.io/hanfor.</p>"},{"location":"contribute/to_hanfor.html","title":"To Hanfor","text":"<p>In this guide we are going to talk about required tools to install in order to set up a development environment for Hanfor.</p> <p>However, to contribute, you know the drill,  head over to Hanfor's Git repository and fork it, then work in your changes and PR.</p>"},{"location":"contribute/to_hanfor.html#environment-setup","title":"Environment Setup","text":"<p>Hanfor is a web based tool running on JavaScript on the client side and python on the server side.</p>"},{"location":"contribute/to_hanfor.html#backend","title":"Backend","text":"<p>Prepare the python environment as described in the installation guide.</p> <p>Additionally install the development requirements</p> <pre><code>pip install -r requirements-dev.txt\n</code></pre>"},{"location":"contribute/to_hanfor.html#frontend","title":"Frontend","text":"<p>To prepare the client side JavaScript code development (and also some static assets), the JavaScript based module bundler webpack is needed.  Note, that webpack has to be executed after changing in the frontend.</p> <ul> <li>Install Node.js on your machine (in order to be able to execute JavaScript code).</li> <li>Run the package manager npm (part of the Node.js installation) to install webpack.</li> </ul> <pre><code>npm install --save-dev webpack\n</code></pre>"},{"location":"contribute/to_hanfor.html#build-and-run","title":"Build and Run","text":"<p>The frontend of Hanfor has to be built before deploying.</p>"},{"location":"contribute/to_hanfor.html#frontend_1","title":"Frontend","text":"<p>To build the frontend change your path to the <code>static</code> folder, and execute webpack as follows</p> <pre><code>cd static\nnpm run build\n</code></pre> <p>If you want to debug java-script code in your browser, you can tell webpack to include a source map by running the following command instead. Note: please do not commit the resulting build to the repository.</p> <pre><code>npm run dev-build\n</code></pre>"},{"location":"contribute/to_hanfor.html#backend_1","title":"Backend","text":"<p>Launch a Hanfor session as explained in the installation guide.</p>"},{"location":"contribute/to_hanfor.html#analysis-connector","title":"Analysis Connector","text":"<p>To start analyses directly from the web frontend, Hanfor has the option to connect to an existing Ultimate-PA server  instance via its web api. For the use of Ultimate-PA a toolchain and user-settings are required. For simplification a toolchain and a set of user settings are combined to a configuration witch can be selected at the frontend. All  configurations addressing the analysis and Ultimate-PA can be set in <code>/hanfor/configuration/ultimate_config.py</code>.</p>"},{"location":"contribute/to_hanfor.html#toolchains","title":"Toolchains","text":"<p>In the ultimate_config file the folder for the toolchain xml files can be set with <code>ULTIMATE_TOOLCHAIN_FOLDER</code>. If this  variable is '' the default folder is uses (<code>configuration/ultimate/toolchains</code>).</p>"},{"location":"contribute/to_hanfor.html#user-settings","title":"User Settings","text":"<p>In the ultimate_config file the folder for the user_setting json files can be set with <code>ULTIMATE_USER_SETTINGS_FOLDER</code>.  If this variable is '' the default folder is uses (<code>configuration/ultimate/user_settings</code>).</p> <p>When using Ultimate-PA locally the user settings are saved in an <code>.epf</code> file. For the web api these user settings have  to be in a json format. To convert the <code>.epf</code> file to a <code>.json</code> file the <code>settings-epf-to-json.py</code> can be used. It is  located in <code>/hanfor/ultimate</code>. Usage: <code>python3 settings-epf-to-json.py &lt;epf-file&gt; [json-file]</code> if <code>[json-file]</code> is not provided the <code>.json</code> file will be named like the <code>.epf</code> file (e.g. <code>name.epf -&gt; name.json</code>).</p>"},{"location":"contribute/to_hanfor.html#configurations","title":"Configurations","text":"<p>When starting an analysis an Ultimate-PA configuration can be chosen. These configurations are set in the  ultimate-config file. Each configuration consists of a toolchain and user-settings. To add a new configuration add a new key, representing the displayed name, to the <code>ULTIMATE_CONFIGURATIONS</code> dict, like shown below. The values of the  <code>toolchain</code> and the <code>user_settings</code> key are the file_names of the corresponding files without the file ending. </p> <pre><code>ULTIMATE_CONFIGURATIONS = {\n    'Standard': {'toolchain': 'ReqCheck', 'user_settings': 'ReqCheck-non-lin'},\n    'Standard 2': {'toolchain': 'ReqCheck', 'user_settings': 'ReqCheck-non-lin'}\n}\n</code></pre>"},{"location":"installation/installation.html","title":"Installation","text":""},{"location":"installation/installation.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Python (Note: Hanfor is only tested with Python 3.10.x)</li> <li>pip</li> </ul>"},{"location":"installation/installation.html#install-hanfor","title":"Install Hanfor","text":"<p>To get Hanfor either download the .zip file or clone the repository.</p>"},{"location":"installation/installation.html#download-zip-file","title":"Download .zip file","text":"<p>Download Hanfor and unzip it. Rename the root folder <code>hanfor-master</code> to <code>hanfor</code>.</p>  Linux Windows <pre><code>mv hanfor-master hanfor\n</code></pre> <pre><code>move hanfor-master hanfor\n</code></pre>"},{"location":"installation/installation.html#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/ultimate-pa/hanfor.git -b master --single-branch </code></pre>"},{"location":"installation/installation.html#install-dependencies","title":"Install dependencies","text":"<p>We recommend using a virtual environment.</p>  Linux Windows <pre><code>cd hanfor/hanfor\npython -m venv hanfor_venv\nsource hanfor_venv/bin/activate\n</code></pre> <pre><code>cd hanfor\\hanfor\npython -m venv hanfor_venv\nhanfor_venv\\Scripts\\activate.bat\n</code></pre> <p>Install all Python dependencies.  <pre><code>pip install -r requirements.txt\n</code></pre></p> <p>Install the Z3 Theorem Prover. <pre><code>pysmt-install --z3\n</code></pre></p>"},{"location":"installation/installation.html#configuration","title":"Configuration","text":"<p>Copy the default config file <code>config.dist.py</code> to <code>config.py</code>.</p>  Linux Windows <pre><code>cp config.dist.py config.py\n</code></pre> <pre><code>copy config.dist.py config.py\n</code></pre> <p>The config file <code>config.py</code> allows you to change various parameters -- see the comments in <code>config.dist.py</code>.</p> <p>Copy the default ultimate config file <code>configuration/ultimate_config.dist.py</code> to <code>configuration/ultimate_config.py</code>.</p>  Linux Windows <pre><code>cp configuration/ultimate_config.dist.py configuration/ultimate_config.py\n</code></pre> <pre><code>copy configuration\\ultimate_config.dist.py configuration\\ultimate_config.py\n</code></pre> <p>The config file <code>ultimate_config.py</code> allows you to change various parameters for the ultimate backend -- see the comments in <code>ultimate_config.dist.py</code>.</p>"},{"location":"installation/installation.html#launch-a-hanfor-session","title":"Launch a Hanfor session","text":""},{"location":"installation/installation.html#launch-a-new-session","title":"Launch a new session","text":"<p><pre><code>python app.py &lt;tag&gt; -c &lt;path_to_input_csv&gt;\n</code></pre> 1. This creates a new session named by <code>&lt;tag&gt;</code> in the <code>SESSION_BASE_FOLDER</code>. 2. It asks the user for a mapping of the following .csv header names.     * \"ID\"     * \"Description\"     * \"Formalized Requirement\"     * \"Type\" 3. It reads requirements from the .csv file and stores them in separate files in the <code>SESSION_BASE_FOLDER</code>. 4. It serves the web interface on <code>HOST</code> and <code>PORT</code>.</p> <p>Open the web interface in your web browser at <code>http://&lt;HOST&gt;:&lt;PORT&gt;</code>.</p>"},{"location":"installation/installation.html#launch-an-existing-session","title":"Launch an existing session","text":"<p><pre><code>python app.py &lt;tag&gt;\n</code></pre> To see all available tags use the <code>-L</code> switch. <pre><code>python app.py -L\n</code></pre> Open the web interface in your web browser at <code>http://&lt;HOST&gt;:&lt;PORT&gt;</code>.</p>"},{"location":"installation/installation.html#reqanalyzer","title":"ReqAnalyzer","text":"<p>With Hanfor you can formalize requirements and export them.  Ultimate ReqAnalyzer is a tool to analyze the formalized requirements and part of the released tools of Ultimate.</p>"},{"location":"installation/installation.html#variant-1-use-the-latest-release","title":"Variant 1: Use the latest release","text":"<ol> <li>Install <code>Java JRE (11)</code></li> <li>Download one of the latest nightly builds.    Depending on your OS, you need to download <code>UReqCheck-linux.zip</code> or <code>UReqCheck-win32.zip</code>.</li> </ol>"},{"location":"installation/installation.html#variant-2-build-the-latest-development-version","title":"Variant 2: Build the latest development version","text":"<ol> <li>Install <code>Java JDK (11)</code> and <code>Maven (&gt;=3.6)</code></li> <li>Clone the repository: <code>git clone https://github.com/ultimate-pa/ultimate</code>.</li> <li>Navigate to the release scripts <code>cd ultimate/releaseScripts/default</code></li> <li>Build the latest binaries by executing <code>./makeFresh.sh</code>. This also works on Windows if you use a <code>bash</code> shell (e.g., from WSL or GitBash). </li> </ol> <p>After a successful build, the binaries are located in <code>UReqCheck-linux</code> and <code>UReqCheck-win32</code>, respectively.</p> <p>In the Workflow section we explain how to use the tool.</p>"},{"location":"introduction/index.html","title":"What is Hanfor?","text":"<p>Hanfor is a tool that helps analyzing and formalizing requirements.</p> <p>The specification of requirements is a critical activity in software and system development. A defect in a requirement specification can result in a situation where a software or system is delivered that fulfills the given requirements, but does not satisfy the customer's needs due to erroneous requirements.</p> <p>Requirement analysis, as a human activity, is error-prone. Especially for large sets of requirements, it is difficult and time consuming to manually check whether a given property is satisfied or not.</p> <p>Requirement based testing is helpful to increase the efficiency during development. Obtaining a high test coverage on requirements often takes a long time. As the number of requirements increases over the releases, the test specifications have to cover more and more requirements. </p> <p>Hanfor is developed to ease the process of requirement analysis. Its method consists of three major steps to discover requirement defects and obtain test specifications based on a set of informal requirements (Figure 1):</p> <ol> <li>Requirement Formalization</li> <li>Requirement Check</li> <li>Test Generation</li> </ol> <p> Figure 1: The Hanfor tool discovers requirement defects and derives test specifications from a given set of informal requirements. </p>"},{"location":"introduction/index.html#requirement-formalization","title":"Requirement Formalization","text":"<p>To make it possible for a computer to check a set of requirements for a given criteria, it has to \"understand\" the semantics of the requirements. This could be achieved by using formal languages, which usually share the fact that they are rarely understandable for humans.</p> <p>In this method we make use of a simple pattern language. The language is based on a restricted English grammar and hence looks like natural language. Requirements formalized in this specification language can automatically be translated into logics.</p>"},{"location":"introduction/index.html#specification-language","title":"Specification Language","text":"<p>The grammar of the specification language is given below. A requirement is defined by an ID, a scope and a pattern. Scope and pattern are parameterised by expressions over system observables and durations. Some patterns require a more detailed description concerning the order or the realtime occurence of events. Note that not all combinations of scope and pattern are supported within the Hanfor tool. For more information, have a look at our pattern section.</p> Grammar: Requirements <pre><code>REQ       ::= ID: SCOPE, PATTERN.\n\nSCOPE     ::= Globally | Before EXPR | After EXPR | Between EXPR and EXPR | After EXPR until EXPR\n\nPATTERN   ::= It is never the case that EXPR holds\n            | It is always the case that EXPR holds\n            | It is always the case that initially EXPR holds \n            | It is always the case that if EXPR holds, then EXPR holds as well\n            | Transitions to states in which EXPR holds occur at most twice\n            | It is always the case that ORDER\n            | It is always the case that REALTIME\n\nORDER     ::= If EXPR holds, then EXPR previously held\n            | If EXPR holds and is succeded by EXPR, then EXPR previously held\n            | If EXPR holds, then EXPR previously held and was preceeded by EXPR\n            | If EXPR holds, then EXPR eventually holds and is succeeded by EXPR\n            | If EXPR holds, then EXPR eventually holds\n            | If EXPR holds, then EXPR eventually holds and is succeeded by EXPR where \n                 EXPR does not hold between EXPR and EXPR\n\nREALTIME  ::= Once EXPR becomes satisfied, it holds for at least DURATION\n            | Once EXPR becomes satisfied, it holds for less than DURATION\n            | Once EXPR becomes satisfied, EXPR holds for at least DURATION\n            | Once EXPR becomes satisfied and holds for at most DURATION, then EXPR holds afterwards\n            | Once EXPR becomes satisfied, EXPR holds after at most DURATION\n            | Once EXPR becomes satisfied, EXPR holds after at most DURATION for at least DURATION\n            | EXPR holds at least every DURATION\n            | EXPR holds after at most DURATION\n            | If EXPR holds, then EXPR holds after at most DURATION\n            | If EXPR holds for at least DURATION, then EXPR holds afterwards for at least DURATION\n            | If EXPR holds for at least DURATION, then EXPR holds after at most DURATION\n            | If EXPR holds for at least DURATION, then EXPR holds afterwards\n            | If EXPR holds, then EXPR holds after at most DURATION for at least DURATION\n            | If EXPR holds, then EXPR holds for at least DURATION\n            | After EXPR holds for at least DURATION and EXPR holds, then EXPR holds\n            | After EXPR holds for at least DURATION and EXPR holds, then EXPR holds after at most DURATION\n</code></pre> Grammar: Expressions <pre><code>EXPR      ::= EXPR_BOOL\n            | EXPR_INT\n            | EXPR_REAL\n            | EXPR &lt;==&gt; EXPR\n            | EXPR ==&gt; EXPR\n            | EXPR &amp;&amp; EXPR\n            | EXPR || EXPR\n            | EXPR == EXPR\n            | EXPR != EXPR\n            | !EXPR\n\nEXPR_BOOL ::= true | false | ID_BOOL\n\nEXPR_INT  ::= INT OP INT\n\nEXPR_REAL ::= REAL OP REAL\n\nINT       ::= NUMBER_INT | ID_INT | OP_UNARY INT\n\nREAL      ::= NUMBER_REAL | ID_REAL | OP_UNARY REAL\n\nOP        ::= == | != | &lt; | &lt;= | &gt; | &gt;= | + | - | * | /\n\nOP_UNARY  ::= + | -\n</code></pre> <p>Figure 2 shows the toolchain for the translation of an informal requirement into a formalized version. In the first step, the informal requirement, given in natural language, is translated into the specification language. This process is done manually. The requirement expressed in the specification language is then automatically translated into a formula in realtime logic (the Duration Calculus).</p> <p> Figure 2: A specification language for real-time requirements is used as an intermediate step in the translation from informal to formalized requirements. </p>"},{"location":"introduction/index.html#requirement-check","title":"Requirement Check","text":"<p>The Hanfor tool chain checks requirements for the following three correctness properties: </p> <ul> <li>Consistency</li> <li>Realtime-consistency</li> <li>Vacuity</li> </ul>"},{"location":"introduction/index.html#consistency","title":"Consistency","text":"<p>A set of requirements is inconsistent, if there exists no system satisfying all requirements in the set.</p> <p>Consider the two requirements in the specification language given below. This set of requirements is obviously not consistent as there is no interpretation where the observable 'A' evaluates both to true and to false at each point in time.</p> <p>Example 1: Inconsistent requirements</p> <ul> <li><code>Req1: Globally, it is never the case that 'A' holds.</code></li> <li><code>Req2: Globally, it is always the case that 'A' holds.</code></li> </ul> <p>Inconsistency in a set of requirements can be resolved by erasing or changing requirements. </p>"},{"location":"introduction/index.html#realtime-consistency-rt-consistency","title":"Realtime-consistency (rt-consistency)","text":"<p>A set of requirements is rt-inconsistent, if there are conflicts between requirements that arise after a certain time.</p> <p>Example 2: Rt-inconsistent requirements</p> <ul> <li><code>Req3: Globally, it is always the case that if 'B' holds then 'C' holds after at most '5' time units.</code></li> <li><code>Req4: Globally, it is always the case that if 'A' holds then '!C' holds for at least '2' time units.</code></li> </ul> <p>Consider the two real-time requirements given above. The set of the two requirements is consistent. Figure 3 gives an example of an interpretation of 'A', 'B', and 'C' (in form of a timing diagram) that satisfies both requirments.</p> <p> Figure 3: Consistency of the set of requirements {Req3, Req4}. 'A' and 'B' occur at the same point in time for one time unit, then '!C' for two time units satisfies Req4, and 'C' occurring at time 5 satisfies Req3. </p> <p>However, there are assignments for which the requirements are in conflict, as depicted in the example trace (Figure 4). If 'A' and 'B'change values as shown in the figure, than at time 5, Req4 would only be satisfied if 'C' remained false while Req3 would only be satisfied if 'C' changed to true.</p> <p> Figure 4: Witness for the rt-inconsistency of the set of requirements {Req3, Req4}. From time 4 on, the system steers toward inevitable rt-inconsistency. </p> <p>There are several possibilities to resolve the rt-inconsistency in a set of requirements, e.g. by erasing, changing or adding requirements.</p> <p>Example 2 (Cont.): Resolving rt-inconsistency</p> <ul> <li>Erasing requirements<ul> <li>e.g. Erase Req4</li> </ul> </li> <li> <p>Changing requirements</p> <ul> <li> <p>e.g. Make Req4 less restrictive:</p> <p><code>Req4': Globally, it is always the case that if 'A' holds and 'B' did not hold in the last 5 time units, then '!C' holds for at least '2' time units.</code></p> </li> </ul> </li> <li> <p>Adding requirements</p> <ul> <li> <p>e.g. Add the following requirement:</p> <p><code>Req5: Globally, it is always the case that if 'B' holds, '!A' holds for at least 5 time units.</code></p> </li> </ul> </li> </ul>"},{"location":"introduction/index.html#vacuity","title":"Vacuity","text":"<p>A set of requirements is vacuous, if the behaviour specified by the requirements cannot be triggered in a system satisfying all requirements. More intuitively spoken, a vacuous requirement can be imagined as dead code in an implementation: Both a vacouous requirement as well as dead code can be removed without changing the meaning of the remaining part.</p> <p>Consider again the requirements Req1 and Req4 given below. The set of requirements is consistent. However, the precondition of Req4 is never true as this would violate Req1. Req4 is therefore vacuously satisfied in this set of requirements.</p> <p>Example 3: Vacuous requirements</p> <ul> <li><code>Req1: Globally, it is never the case that 'A' holds.</code></li> <li><code>Req4: Globally, it is always the case that if 'A' holds then '!C' holds for at least '2' time units.</code></li> </ul> <p>There are several possibilities to resolve vacuity in a set of requirements. </p> <p>Example 3 (cont.): Resolving vacuity</p> <ul> <li>Erasing requirements<ul> <li>e.g. Erase Req1</li> </ul> </li> <li>Changing requirements<ul> <li> <p>e.g. Make Req1 less restrictive:</p> <p><code>Req2': Before \"Startup\", it is never the case that 'A'holds.</code></p> </li> </ul> </li> </ul>"},{"location":"introduction/index.html#test-generation","title":"Test Generation","text":"<p>Formalized requirements can be used to automatically generate test specifications. An automatic test generation helps to reduce the time needed to write test specifications with a high coverage rate. The efficiency during development can be increased and the maintainability costs can be reduced.</p>"},{"location":"introduction/index.html#algorithm","title":"Algorithm","text":"<p>Testing requires information about observability. The system variables are therefore categorized into input, output, and hidden (i.e. internal) variables. A sequence of inputs deterministically causes the valuation of the output variable. Figure 5 shows an abstract view of a two-input system with the variables A, B and C. </p> <p> Figure 5: System S with input variables A, B, and output variable C. </p> <p>The test generation algorithm automatically generates system tests that are based only on the formalized requirements (i.e. do not depend on an additional system model). It generates at least one test case per output variable, but as most as many test cases such that every requirement is tested. Each generated test indicates the requirements that it is based on.</p> <p>It is ensured that the generated tests may not lead to false positives (i.e. the test case fails, although the system state is conform with the requirements). In case that there exist untestable requirements, the algorithm lists the set of untestable requirements.</p>"},{"location":"introduction/index.html#test-cases","title":"Test Cases","text":"<p>The test cases generated by Hanfor contain three sorts of information:</p> <ol> <li>A sequence of n inputs: The initial state of the system, as well as the inputs for steps 1 to n.</li> <li>The expected outcome: The expected valuation of the tested output variable. </li> <li>The indication on which requirements the test is based on.</li> </ol> <p>Consider the set of requirements given below. The variables A, B are considered to be inputs of the system (Figure 5), H and I are hidden variables, and C represents the output of the system.</p> <p>Example 4: Requirements to be tested</p> <ul> <li><code>Req1: Globally, it is always the case that if \u2018A\u2019 holds then \u2018H\u2019 holds after at most \u201810\u2019 time units.</code></li> <li><code>Req2: Globally, it is always the case that if \u2018B\u2019 holds then \u2018I\u2019 holds after at most \u201810\u2019 time units.</code></li> <li><code>Req3: Globally, it is always the case that if \u2018H AND I\u2019 holds then \u2018C\u2019 holds after at most \u201810\u2019 time units.</code></li> </ul> <p>The test generation tool outputs the following test case:</p> <pre><code>Case SystemTest:\nTestGeneratorResult:\nFound Test for: [C]\nTest Vector:\nSet inputs:\nA := true, B := true\nWait for at most 20 for:\nC == true, (req3)\n</code></pre> <p>The given test case tests the output variable C based on the third requirement. The input sequence is specified by an initial state only, in which both input variables A and B are set to true. The output variable C is expected to evaluate to true after at most 20 time units.</p>"},{"location":"introduction/index.html#tool-support","title":"Tool support","text":"<p>Hanfor takes as input an exported .csv file from Doors and stores the requirements. Figure 7 shows a screenshot of requirements imported into a Hanfor session. There are two IDs, the Hanfor ID and the Doors ID, so that the two databases can be synchronized. The informal requirements are listed in the column 'Description'. Once a requirement is formalized in the specification language, it is listed in the column 'Formalization'. </p> <p> Figure 6: Requirements exported into a Hanfor session. </p> <p>Clicking on a requirement opens the modification page of the requirement (Figure 8). The requirement can be formalized in the specification language by using the drop-down lists for both scopes and patterns. The variables can be specified manually by using the autocomplete function of the signal database.</p> <p> Figure 7: Modification window of a single requirement. </p> <p>For more information about the usage of Hanfor, please have a look at the usage section.</p>"},{"location":"references/duration_calculus.html","title":"Duration Calculus","text":"<p>Hanfor automatically translates requirements, that are given in the natural-language-style specification language, into Counterexample Formulae, a small and comprehensible subset of Duration Calculus (DC).</p> <p>This short guide should enable you to read and interpret the Duration Calculus formulae provided within this documentation. It aims to give you an intuitive insight into the small fragment of Duration Calculus that we use in our tool.</p> <p>Duration Calculus uses time intervalls to express sequential behavior. Assuming that you are familiar with the basic concept of Boolean logic, there are only three additional operators that need to be introduced.</p> <p>Everywhere-Operator: \u2308 \u2309</p> <p>The everywhere-operator applied to an expression describes an interval of arbitrary length (length &gt; 0) in which the embraced expression holds.  If the operator is kept empty, it describes a point interval (length = 0).</p> <p>Let 'A' be an expression. Consider the DC-formula: <code>\u2308A\u2309</code></p> <p>It describes an interval of arbitrary length (length &gt; 0) in which expression 'A' holds.</p> <p>Length-Operator: \u2113</p> <p>The length-operator is used to measure the length of an interval.</p> <p>Let 'A' be an expression. Consider the DC-formula: <code>\u2308A\u2309 \u2227 \u2113 = 5</code></p> <p>It describes an interval with a length of 5 time units in which expression 'A' holds.</p> <p>Chop-Operator: ;</p> <p>The chop-operator \"chops\" larger time intervals into smaller subintervals.</p> <p>Let 'A', 'B', and 'C' be expressions. Consider the DC-formula: <code>\u2308A\u2309; \u2308B\u2309; \u2308C\u2309</code></p> <p>It describes a behavior where first expression 'A' holds , then exprression 'B' holds, and finally expression 'C' holds. Note: All intervals may have an arbitrary length &gt; 0 time units, as there is no explicit  constraint on their duration.</p>"},{"location":"references/duration_calculus.html#counterexample-formulas","title":"Counterexample Formulas","text":"<p>Now that we have looked at some necessary building blocks of DC, we can look at counterexample formulas. </p> <p>Counterexample Formula</p> <p>Formally, a counterexample formula \u03a8 is a DC-formula of the form: <code>\u03a8 = (\u2308e1\u2309 \u2227 \u2113 ~ t1); ... ;(\u2308ek\u2309 \u2227 \u2113 ~ tk); true</code> ,  where <code>e1</code> to <code>ek</code> represent state expressions, <code>t1</code> to <code>tk</code> are non-zero durations, and <code>~ \u220a [\u2264,\u2265]</code>.</p> <p>In other words, the counterexample formula exactly describes the undesired behavior relative to the given requirement. </p> <p>In the following, you find some examples. In each we give a property in the natural-language-style specification language, the counterexample DC-formula describing the undesired behavior, and a short explanation.</p> <p>Example 1:</p> <ul> <li>Globally, it is always the case that 'Q' holds. </li> <li>Counterexample: <code>(true; \u2308!Q\u2309; true)</code> </li> <li>The counterexample DC-formula describes all behaviors that violate the given specification. In this example, the requirement is violated if there is an interval in which 'Q' does not hold.</li> </ul> <p>Example 2:</p> <ul> <li>Before 'Q', it is always the case that 'R' holds at least every '5' time units </li> <li>Counterexample: <code>(\u2308!Q\u2309; \u2308(!Q &amp;&amp; !R)\u2309 \u2227 \u2113 &gt; 5; true)</code> </li> <li>The requirement can only be violated within its scope. All countertraces therefore have in common that '!Q' holds until the violation occured. The requirement is violated if '!R' holds longer than 5 time units.</li> </ul> <p>Example 3:</p> <ul> <li>After 'Q', it is always the case that once 'R' becomes satisfied, it holds for less than '5' time units. </li> <li>Counterexample: <code>(true; \u2308Q\u2309; true; \u2308!R\u2309; \u2308R\u2309 \u2227 \u2113 \u2265 5; true)</code> </li> <li>The requirement can only be violated within its scope. All countertraces therefore have in common that 'Q' must hold before the violation occurs. 'R' becomes satisfied, when it toggles from false to true. The requirement is violated if 'R' holds for at least 5 time units.</li> </ul>"},{"location":"references/patterns.html","title":"Patterns","text":"<p>This section provides you with an overview of all the patterns that are currently supported in Hanfor. For each pattern, we give a description in the natural-language-style specification language, its undesired behavior represented as a Duration Calculus formula, and its Phase Event Automaton representation.</p> <p>Ultimate revision on Github that corresponds to this documention:  e334897bb9b02a6ec9123dd0e3e43aaaa5bf07a0</p>"},{"location":"references/patterns.html#absence","title":"Absence","text":""},{"location":"references/patterns.html#absence-globally","title":"Absence Globally","text":"<pre><code>Globally, it is never the case that \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces","title":"Countertraces","text":"<pre><code>true;\u2308R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata","title":"Phase Event Automata","text":"Positive Examples: Absence - Globally"},{"location":"references/patterns.html#absence-before","title":"Absence Before","text":"<pre><code>Before \"P\", it is never the case that \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_1","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_1","title":"Phase Event Automata","text":"Positive Examples: Absence - Before"},{"location":"references/patterns.html#absence-after","title":"Absence After","text":"<pre><code>After \"P\", it is never the case that \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_2","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_2","title":"Phase Event Automata","text":"Positive Examples: Absence - After"},{"location":"references/patterns.html#absence-between","title":"Absence Between","text":"<pre><code>Between \"P\" and \"Q\", it is never the case that \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_3","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_3","title":"Phase Event Automata","text":"Positive Examples: Absence - Between"},{"location":"references/patterns.html#absence-afteruntil","title":"Absence AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is never the case that \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_4","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_4","title":"Phase Event Automata","text":"Positive Examples: Absence - AfterUntil"},{"location":"references/patterns.html#constrainedchain","title":"ConstrainedChain","text":""},{"location":"references/patterns.html#constrainedchain-before","title":"ConstrainedChain Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds, then \"S\" eventually holds and is succeeded by \"T\" where \"U\" does not hold between \"S\" and \"T\"\n</code></pre>"},{"location":"references/patterns.html#countertraces_5","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308(!P &amp;&amp; !S)\u2309;\u2308P\u2309;true\n\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308!P\u2309;\u2308(!P &amp;&amp; S)\u2309;\u2308(!P &amp;&amp; !T)\u2309;\u2308P\u2309;true\n\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308!P\u2309;\u2308(!P &amp;&amp; S)\u2309;\u2308(!P &amp;&amp; !T)\u2309;\u2308(!P &amp;&amp; (!T &amp;&amp; U))\u2309;\u2308!P\u2309;\u2308(!P &amp;&amp; T)\u2309;\u2308!P\u2309;\u2308P\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_5","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#constrainedchain-between","title":"ConstrainedChain Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds, then \"S\" eventually holds and is succeeded by \"T\" where \"U\" does not hold between \"S\" and \"T\"\n</code></pre>"},{"location":"references/patterns.html#countertraces_6","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !S)\u2309;\u2308Q\u2309;true\ntrue;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; S)\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308Q\u2309;true\ntrue;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; S)\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308(!Q &amp;&amp; (!T &amp;&amp; U))\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; T)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_6","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#constrainedchain-between_1","title":"ConstrainedChain Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds, then \"S\" eventually holds and is succeeded by \"T\" where \"U\" does not hold between \"S\" and \"T\"\n</code></pre>"},{"location":"references/patterns.html#countertraces_7","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !S)\u2309;\u2308Q\u2309;true\ntrue;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; S)\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308Q\u2309;true\ntrue;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; S)\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308(!Q &amp;&amp; (!T &amp;&amp; U))\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; T)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_7","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#durationboundl","title":"DurationBoundL","text":""},{"location":"references/patterns.html#durationboundl-globally","title":"DurationBoundL Globally","text":"<pre><code>Globally, it is always the case that once \"R\" becomes satisfied, it holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_8","title":"Countertraces","text":"<pre><code>true;\u2308!R\u2309;\u2308R\u2309 \u2227 \u2113 &lt; 5;\u2308!R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_8","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#durationboundl-before","title":"DurationBoundL Before","text":"<pre><code>Before \"P\", it is always the case that once \"R\" becomes satisfied, it holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_9","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; !R)\u2309;\u2308(!P &amp;&amp; R)\u2309 \u2227 \u2113 &lt; 5;\u2308(!P &amp;&amp; !R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_9","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#durationboundl-after","title":"DurationBoundL After","text":"<pre><code>After \"P\", it is always the case that once \"R\" becomes satisfied, it holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_10","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308!R\u2309;\u2308R\u2309 \u2227 \u2113 &lt; 5;\u2308!R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_10","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#durationboundl-between","title":"DurationBoundL Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that once \"R\" becomes satisfied, it holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_11","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 &lt; 5;\u2308(!Q &amp;&amp; !R)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_11","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#durationboundl-afteruntil","title":"DurationBoundL AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that once \"R\" becomes satisfied, it holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_12","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 &lt; 5;\u2308(!Q &amp;&amp; !R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_12","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#durationboundu","title":"DurationBoundU","text":""},{"location":"references/patterns.html#durationboundu-globally","title":"DurationBoundU Globally","text":"<pre><code>Globally, it is always the case that once \"R\" becomes satisfied, it holds for less than \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_13","title":"Countertraces","text":"<pre><code>true;\u2308R\u2309 \u2227 \u2113 \u2265 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_13","title":"Phase Event Automata","text":"Positive Examples: DurationBoundU - Globally"},{"location":"references/patterns.html#durationboundu-before","title":"DurationBoundU Before","text":"<pre><code>Before \"P\", it is always the case that once \"R\" becomes satisfied, it holds for less than \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_14","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_14","title":"Phase Event Automata","text":"Positive Examples: DurationBoundU - Before"},{"location":"references/patterns.html#durationboundu-after","title":"DurationBoundU After","text":"<pre><code>After \"P\", it is always the case that once \"R\" becomes satisfied, it holds for less than \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_15","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308R\u2309 \u2227 \u2113 \u2265 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_15","title":"Phase Event Automata","text":"Positive Examples: DurationBoundU - After"},{"location":"references/patterns.html#durationboundu-between","title":"DurationBoundU Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that once \"R\" becomes satisfied, it holds for less than \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_16","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_16","title":"Phase Event Automata","text":"Positive Examples: DurationBoundU - Between"},{"location":"references/patterns.html#durationboundu-afteruntil","title":"DurationBoundU AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that once \"R\" becomes satisfied, it holds for less than \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_17","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_17","title":"Phase Event Automata","text":"Positive Examples: DurationBoundU - AfterUntil"},{"location":"references/patterns.html#edgeresponseboundl2","title":"EdgeResponseBoundL2","text":""},{"location":"references/patterns.html#edgeresponseboundl2-globally","title":"EdgeResponseBoundL2 Globally","text":"<pre><code>Globally, it is always the case that once \"R\" becomes satisfied, \"S\" holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_18","title":"Countertraces","text":"<pre><code>true;\u2308!R\u2309;\u2308R\u2309;\u2308S\u2309 \u2227 \u2113 &lt; 5;\u2308!S\u2309;true\ntrue;\u2308!R\u2309;\u2308(R &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_18","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseBoundL2 - Globally"},{"location":"references/patterns.html#edgeresponseboundl2-before","title":"EdgeResponseBoundL2 Before","text":"<pre><code>Before \"P\", it is always the case that once \"R\" becomes satisfied, \"S\" holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_19","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; !R)\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308(!P &amp;&amp; S)\u2309 \u2227 \u2113 &lt; 5;\u2308(!P &amp;&amp; !S)\u2309;true\n\u2308!P\u2309;\u2308(!P &amp;&amp; !R)\u2309;\u2308(!P &amp;&amp; (R &amp;&amp; !S))\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_19","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseBoundL2 - Before"},{"location":"references/patterns.html#edgeresponseboundl2-after","title":"EdgeResponseBoundL2 After","text":"<pre><code>After \"P\", it is always the case that once \"R\" becomes satisfied, \"S\" holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_20","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308!R\u2309;\u2308R\u2309;\u2308S\u2309 \u2227 \u2113 &lt; 5;\u2308!S\u2309;true\ntrue;\u2308P\u2309;true;\u2308!R\u2309;\u2308(R &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_20","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseBoundL2 - After"},{"location":"references/patterns.html#edgeresponseboundl2-between","title":"EdgeResponseBoundL2 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that once \"R\" becomes satisfied, \"S\" holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_21","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; S)\u2309 \u2227 \u2113 &lt; 5;\u2308(!Q &amp;&amp; !S)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\ntrue;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_21","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#edgeresponseboundl2-afteruntil","title":"EdgeResponseBoundL2 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that once \"R\" becomes satisfied, \"S\" holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_22","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; S)\u2309 \u2227 \u2113 &lt; 5;\u2308(!Q &amp;&amp; !S)\u2309;true\ntrue;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; (R &amp;&amp; !S))\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_22","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseBoundL2 - AfterUntil"},{"location":"references/patterns.html#edgeresponseboundu1","title":"EdgeResponseBoundU1","text":""},{"location":"references/patterns.html#edgeresponseboundu1-globally","title":"EdgeResponseBoundU1 Globally","text":"<pre><code>Globally, it is always the case that once \"R\" becomes satisfied and holds for at most \"5\" time units, then \"S\" holds afterwards\n</code></pre>"},{"location":"references/patterns.html#countertraces_23","title":"Countertraces","text":"<pre><code>true;\u2308!R\u2309;\u2308R\u2309 \u2227 \u2113 \u2264 5;\u2308(!R &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_23","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseBoundU1 - Globally"},{"location":"references/patterns.html#edgeresponseboundu1-before","title":"EdgeResponseBoundU1 Before","text":"<pre><code>Before \"P\", it is always the case that once \"R\" becomes satisfied and holds for at most \"5\" time units, then \"S\" holds afterwards\n</code></pre>"},{"location":"references/patterns.html#countertraces_24","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; !R)\u2309;\u2308(!P &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!P &amp;&amp; (!R &amp;&amp; !S))\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_24","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseBoundU1 - Before"},{"location":"references/patterns.html#edgeresponseboundu1-after","title":"EdgeResponseBoundU1 After","text":"<pre><code>After \"P\", it is always the case that once \"R\" becomes satisfied and holds for at most \"5\" time units, then \"S\" holds afterwards\n</code></pre>"},{"location":"references/patterns.html#countertraces_25","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308!R\u2309;\u2308R\u2309 \u2227 \u2113 \u2264 5;\u2308(!R &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_25","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseBoundU1 - After"},{"location":"references/patterns.html#edgeresponseboundu1-between","title":"EdgeResponseBoundU1 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that once \"R\" becomes satisfied and holds for at most \"5\" time units, then \"S\" holds afterwards\n</code></pre>"},{"location":"references/patterns.html#countertraces_26","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2264 5;\u2308(!Q &amp;&amp; (!R &amp;&amp; !S))\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_26","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseBoundU1 - Between"},{"location":"references/patterns.html#edgeresponseboundu1-afteruntil","title":"EdgeResponseBoundU1 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that once \"R\" becomes satisfied and holds for at most \"5\" time units, then \"S\" holds afterwards\n</code></pre>"},{"location":"references/patterns.html#countertraces_27","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2264 5;\u2308(!Q &amp;&amp; (!R &amp;&amp; !S))\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_27","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseBoundU1 - AfterUntil"},{"location":"references/patterns.html#edgeresponsedelay","title":"EdgeResponseDelay","text":""},{"location":"references/patterns.html#edgeresponsedelay-globally","title":"EdgeResponseDelay Globally","text":"<pre><code>Globally, it is always the case that once \"R\" becomes satisfied, \"S\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_28","title":"Countertraces","text":"<pre><code>true;\u2308!R\u2309;\u2308(R &amp;&amp; !S)\u2309;\u2308!S\u2309 \u2227 \u2113 &gt; 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_28","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseDelay - Globally"},{"location":"references/patterns.html#edgeresponsedelay-before","title":"EdgeResponseDelay Before","text":"<pre><code>Before \"P\", it is always the case that once \"R\" becomes satisfied, \"S\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_29","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; !R)\u2309;\u2308(!P &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308(!P &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_29","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#edgeresponsedelay-after","title":"EdgeResponseDelay After","text":"<pre><code>After \"P\", it is always the case that once \"R\" becomes satisfied, \"S\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_30","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308!R\u2309;\u2308(R &amp;&amp; !S)\u2309;\u2308!S\u2309 \u2227 \u2113 &gt; 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_30","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseDelay - After"},{"location":"references/patterns.html#edgeresponsedelay-between","title":"EdgeResponseDelay Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that once \"R\" becomes satisfied, \"S\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_31","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308(!Q &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 5;true;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_31","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#edgeresponsedelay-afteruntil","title":"EdgeResponseDelay AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that once \"R\" becomes satisfied, \"S\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_32","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308(!Q &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_32","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#edgeresponsedelayboundl2","title":"EdgeResponseDelayBoundL2","text":""},{"location":"references/patterns.html#edgeresponsedelayboundl2-globally","title":"EdgeResponseDelayBoundL2 Globally","text":"<pre><code>Globally, it is always the case that once \"R\" becomes satisfied, \"S\" holds after at most \"5\" time units for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_33","title":"Countertraces","text":"<pre><code>true;\u2308!R\u2309;\u2308(R &amp;&amp; !S)\u2309;\u2308!S\u2309 \u2227 \u2113 &gt; 5;true\ntrue;\u2308!R\u2309;\u2308R\u2309;\u2308true\u2309 \u2227 \u2113 &lt; 5;\u2308S\u2309 \u2227 \u2113 &lt; 10;\u2308!S\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_33","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseDelayBoundL2 - Globally"},{"location":"references/patterns.html#edgeresponsedelayboundl2-before","title":"EdgeResponseDelayBoundL2 Before","text":"<pre><code>Before \"P\", it is always the case that once \"R\" becomes satisfied, \"S\" holds after at most \"5\" time units for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_34","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; !R)\u2309;\u2308(!P &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308(!P &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 5;true\n\u2308!P\u2309;\u2308(!P &amp;&amp; !R)\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308!P\u2309 \u2227 \u2113 &lt; 5;\u2308(!P &amp;&amp; S)\u2309 \u2227 \u2113 &lt; 10;\u2308(!P &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_34","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseDelayBoundL2 - Before"},{"location":"references/patterns.html#edgeresponsedelayboundl2-after","title":"EdgeResponseDelayBoundL2 After","text":"<pre><code>After \"P\", it is always the case that once \"R\" becomes satisfied, \"S\" holds after at most \"5\" time units for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_35","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308!R\u2309;\u2308(R &amp;&amp; !S)\u2309;\u2308!S\u2309 \u2227 \u2113 &gt; 5;true\ntrue;\u2308P\u2309;true;\u2308!R\u2309;\u2308R\u2309;\u2308true\u2309 \u2227 \u2113 &lt; 5;\u2308S\u2309 \u2227 \u2113 &lt; 10;\u2308!S\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_35","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseDelayBoundL2 - After"},{"location":"references/patterns.html#edgeresponsedelayboundl2-between","title":"EdgeResponseDelayBoundL2 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that once \"R\" becomes satisfied, \"S\" holds after at most \"5\" time units for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_36","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308(!Q &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 5;true;\u2308Q\u2309;true\ntrue;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309 \u2227 \u2113 &lt; 5;\u2308(!Q &amp;&amp; S)\u2309 \u2227 \u2113 &lt; 10;\u2308(!Q &amp;&amp; !S)\u2309;true;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_36","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#edgeresponsedelayboundl2-afteruntil","title":"EdgeResponseDelayBoundL2 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that once \"R\" becomes satisfied, \"S\" holds after at most \"5\" time units for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_37","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308(!Q &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 5;true\ntrue;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309 \u2227 \u2113 &lt; 5;\u2308(!Q &amp;&amp; S)\u2309 \u2227 \u2113 &lt; 10;\u2308(!Q &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_37","title":"Phase Event Automata","text":"Positive Examples: EdgeResponseDelayBoundL2 - AfterUntil"},{"location":"references/patterns.html#existenceboundu","title":"ExistenceBoundU","text":""},{"location":"references/patterns.html#existenceboundu-globally","title":"ExistenceBoundU Globally","text":"<pre><code>Globally, transitions to states in which \"R\" holds occur at most twice\n</code></pre>"},{"location":"references/patterns.html#countertraces_38","title":"Countertraces","text":"<pre><code>true;\u2308R\u2309;\u2308!R\u2309;\u2308R\u2309;\u2308!R\u2309;\u2308R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_38","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#existenceboundu-before","title":"ExistenceBoundU Before","text":"<pre><code>Before \"P\", transitions to states in which \"R\" holds occur at most twice\n</code></pre>"},{"location":"references/patterns.html#countertraces_39","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308(!P &amp;&amp; !R)\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308(!P &amp;&amp; !R)\u2309;\u2308(!P &amp;&amp; R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_39","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#existenceboundu-after","title":"ExistenceBoundU After","text":"<pre><code>After \"P\", transitions to states in which \"R\" holds occur at most twice\n</code></pre>"},{"location":"references/patterns.html#countertraces_40","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308R\u2309;\u2308!R\u2309;\u2308R\u2309;\u2308!R\u2309;\u2308R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_40","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#existenceboundu-between","title":"ExistenceBoundU Between","text":"<pre><code>Between \"P\" and \"Q\", transitions to states in which \"R\" holds occur at most twice\n</code></pre>"},{"location":"references/patterns.html#countertraces_41","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_41","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#existenceboundu-afteruntil","title":"ExistenceBoundU AfterUntil","text":"<pre><code>After \"P\" until \"Q\", transitions to states in which \"R\" holds occur at most twice\n</code></pre>"},{"location":"references/patterns.html#countertraces_42","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308(!Q &amp;&amp; R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_42","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#initialization","title":"Initialization","text":""},{"location":"references/patterns.html#initialization-globally","title":"Initialization Globally","text":"<pre><code>Globally, it is always the case that initially \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_43","title":"Countertraces","text":"<pre><code>\u2308!R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_43","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#initialization-before","title":"Initialization Before","text":"<pre><code>Before \"P\", it is always the case that initially \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_44","title":"Countertraces","text":"<pre><code>\u2308(!P &amp;&amp; !R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_44","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#initialization-after","title":"Initialization After","text":"<pre><code>After \"P\", it is always the case that initially \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_45","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_45","title":"Phase Event Automata","text":"Positive Examples: Initialization - After"},{"location":"references/patterns.html#initialization-between","title":"Initialization Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that initially \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_46","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308(!Q &amp;&amp; !R)\u2309;true;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_46","title":"Phase Event Automata","text":"Positive Examples: Initialization - Between"},{"location":"references/patterns.html#initialization-afteruntil","title":"Initialization AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that initially \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_47","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308(!Q &amp;&amp; !R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_47","title":"Phase Event Automata","text":"Positive Examples: Initialization - AfterUntil"},{"location":"references/patterns.html#invariance","title":"Invariance","text":""},{"location":"references/patterns.html#invariance-globally","title":"Invariance Globally","text":"<pre><code>Globally, it is always the case that if \"R\" holds, then \"S\" holds as well\n</code></pre>"},{"location":"references/patterns.html#countertraces_48","title":"Countertraces","text":"<pre><code>true;\u2308(R &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_48","title":"Phase Event Automata","text":"Positive Examples: Invariance - Globally"},{"location":"references/patterns.html#invariance-before","title":"Invariance Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds, then \"S\" holds as well\n</code></pre>"},{"location":"references/patterns.html#countertraces_49","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; (R &amp;&amp; !S))\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_49","title":"Phase Event Automata","text":"Positive Examples: Invariance - Before"},{"location":"references/patterns.html#invariance-after","title":"Invariance After","text":"<pre><code>After \"P\", it is always the case that if \"R\" holds, then \"S\" holds as well\n</code></pre>"},{"location":"references/patterns.html#countertraces_50","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308(R &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_50","title":"Phase Event Automata","text":"Positive Examples: Invariance - After"},{"location":"references/patterns.html#invariance-between","title":"Invariance Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds, then \"S\" holds as well\n</code></pre>"},{"location":"references/patterns.html#countertraces_51","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_51","title":"Phase Event Automata","text":"Positive Examples: Invariance - Between"},{"location":"references/patterns.html#invariance-afteruntil","title":"Invariance AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds, then \"S\" holds as well\n</code></pre>"},{"location":"references/patterns.html#countertraces_52","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; (R &amp;&amp; !S))\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_52","title":"Phase Event Automata","text":"Positive Examples: Invariance - AfterUntil"},{"location":"references/patterns.html#invarianceboundl2","title":"InvarianceBoundL2","text":""},{"location":"references/patterns.html#invarianceboundl2-globally","title":"InvarianceBoundL2 Globally","text":"<pre><code>Globally, it is always the case that if \"R\" holds, then \"S\" holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_53","title":"Countertraces","text":"<pre><code>true;\u2308R\u2309;\u2308true\u2309 \u2227 \u2113 &lt; 5;\u2308!S\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_53","title":"Phase Event Automata","text":"Positive Examples: InvarianceBoundL2 - Globally"},{"location":"references/patterns.html#invarianceboundl2-before","title":"InvarianceBoundL2 Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds, then \"S\" holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_54","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308!P\u2309 \u2227 \u2113 &lt; 5;\u2308(!P &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_54","title":"Phase Event Automata","text":"Positive Examples: InvarianceBoundL2 - Before"},{"location":"references/patterns.html#invarianceboundl2-after","title":"InvarianceBoundL2 After","text":"<pre><code>After \"P\", it is always the case that if \"R\" holds, then \"S\" holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_55","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308R\u2309;\u2308true\u2309 \u2227 \u2113 &lt; 5;\u2308!S\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_55","title":"Phase Event Automata","text":"Positive Examples: InvarianceBoundL2 - After"},{"location":"references/patterns.html#invarianceboundl2-between","title":"InvarianceBoundL2 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds, then \"S\" holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_56","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309 \u2227 \u2113 &lt; 5;\u2308(!Q &amp;&amp; !S)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_56","title":"Phase Event Automata","text":"Positive Examples: InvarianceBoundL2 - Between"},{"location":"references/patterns.html#invarianceboundl2-afteruntil","title":"InvarianceBoundL2 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds, then \"S\" holds for at least \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_57","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309 \u2227 \u2113 &lt; 5;\u2308(!Q &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_57","title":"Phase Event Automata","text":"Positive Examples: InvarianceBoundL2 - AfterUntil"},{"location":"references/patterns.html#persistence","title":"Persistence","text":""},{"location":"references/patterns.html#persistence-globally","title":"Persistence Globally","text":"<pre><code>Globally, it is always the case that if \"R\" holds, then it holds persistently\n</code></pre>"},{"location":"references/patterns.html#countertraces_58","title":"Countertraces","text":"<pre><code>true;\u2308R\u2309;\u2308!R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_58","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#persistence-before","title":"Persistence Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds, then it holds persistently\n</code></pre>"},{"location":"references/patterns.html#countertraces_59","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308(!P &amp;&amp; !R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_59","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#persistence-after","title":"Persistence After","text":"<pre><code>After \"P\", it is always the case that if \"R\" holds, then it holds persistently\n</code></pre>"},{"location":"references/patterns.html#countertraces_60","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308R\u2309;\u2308!R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_60","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#persistence-between","title":"Persistence Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds, then it holds persistently\n</code></pre>"},{"location":"references/patterns.html#countertraces_61","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_61","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#persistence-afteruntil","title":"Persistence AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds, then it holds persistently\n</code></pre>"},{"location":"references/patterns.html#countertraces_62","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_62","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#precedence","title":"Precedence","text":""},{"location":"references/patterns.html#precedence-globally","title":"Precedence Globally","text":"<pre><code>Globally, it is always the case that if \"R\" holds, then \"S\" previously held\n</code></pre>"},{"location":"references/patterns.html#countertraces_63","title":"Countertraces","text":"<pre><code>\u2308!S\u2309;\u2308R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_63","title":"Phase Event Automata","text":"Positive Examples: Precedence - Globally"},{"location":"references/patterns.html#precedence-before","title":"Precedence Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds, then \"S\" previously held\n</code></pre>"},{"location":"references/patterns.html#countertraces_64","title":"Countertraces","text":"<pre><code>\u2308(!P &amp;&amp; !S)\u2309;\u2308(!P &amp;&amp; R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_64","title":"Phase Event Automata","text":"Positive Examples: Precedence - Before"},{"location":"references/patterns.html#precedence-after","title":"Precedence After","text":"<pre><code>After \"P\", it is always the case that if \"R\" holds, then \"S\" previously held\n</code></pre>"},{"location":"references/patterns.html#countertraces_65","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!S\u2309;\u2308R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_65","title":"Phase Event Automata","text":"Positive Examples: Precedence - After"},{"location":"references/patterns.html#precedence-between","title":"Precedence Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds, then \"S\" previously held\n</code></pre>"},{"location":"references/patterns.html#countertraces_66","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; (!Q &amp;&amp; !S))\u2309;\u2308(!Q &amp;&amp; !S)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_66","title":"Phase Event Automata","text":"Positive Examples: Precedence - Between"},{"location":"references/patterns.html#precedence-afteruntil","title":"Precedence AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds, then \"S\" previously held\n</code></pre>"},{"location":"references/patterns.html#countertraces_67","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308(!Q &amp;&amp; !S)\u2309;\u2308(!Q &amp;&amp; R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_67","title":"Phase Event Automata","text":"Positive Examples: Precedence - AfterUntil"},{"location":"references/patterns.html#precedencechain12","title":"PrecedenceChain12","text":""},{"location":"references/patterns.html#precedencechain12-globally","title":"PrecedenceChain12 Globally","text":"<pre><code>Globally, it is always the case that if \"R\" holds and is succeeded by \"S\", then \"T\" previously held\n</code></pre>"},{"location":"references/patterns.html#countertraces_68","title":"Countertraces","text":"<pre><code>\u2308!T\u2309;\u2308R\u2309;true;\u2308S\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_68","title":"Phase Event Automata","text":"Positive Examples: PrecedenceChain12 - Globally"},{"location":"references/patterns.html#precedencechain12-before","title":"PrecedenceChain12 Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds and is succeeded by \"S\", then \"T\" previously held\n</code></pre>"},{"location":"references/patterns.html#countertraces_69","title":"Countertraces","text":"<pre><code>\u2308(!P &amp;&amp; !T)\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308!P\u2309;\u2308(!P &amp;&amp; S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_69","title":"Phase Event Automata","text":"Positive Examples: PrecedenceChain12 - Before"},{"location":"references/patterns.html#precedencechain12-after","title":"PrecedenceChain12 After","text":"<pre><code>After \"P\", it is always the case that if \"R\" holds and is succeeded by \"S\", then \"T\" previously held\n</code></pre>"},{"location":"references/patterns.html#countertraces_70","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!T\u2309;\u2308R\u2309;true;\u2308S\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_70","title":"Phase Event Automata","text":"Positive Examples: PrecedenceChain12 - After"},{"location":"references/patterns.html#precedencechain12-between","title":"PrecedenceChain12 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds and is succeeded by \"S\", then \"T\" previously held\n</code></pre>"},{"location":"references/patterns.html#countertraces_71","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; S)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_71","title":"Phase Event Automata","text":"Positive Examples: PrecedenceChain12 - Between"},{"location":"references/patterns.html#precedencechain12-afteruntil","title":"PrecedenceChain12 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds and is succeeded by \"S\", then \"T\" previously held\n</code></pre>"},{"location":"references/patterns.html#countertraces_72","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_72","title":"Phase Event Automata","text":"Positive Examples: PrecedenceChain12 - AfterUntil"},{"location":"references/patterns.html#precedencechain21","title":"PrecedenceChain21","text":""},{"location":"references/patterns.html#precedencechain21-globally","title":"PrecedenceChain21 Globally","text":"<pre><code>Globally, it is always the case that if \"R\" holds, then \"S\" previously held and was preceded by \"T\"\n</code></pre>"},{"location":"references/patterns.html#countertraces_73","title":"Countertraces","text":"<pre><code>\u2308!T\u2309;\u2308R\u2309;true\n\u2308!S\u2309;\u2308R\u2309;true\n\u2308!T\u2309;\u2308(S &amp;&amp; !T)\u2309;\u2308!T\u2309;\u2308(!S &amp;&amp; T)\u2309;\u2308!S\u2309;\u2308R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_73","title":"Phase Event Automata","text":"Positive Examples: PrecedenceChain21 - Globally"},{"location":"references/patterns.html#precedencechain21-before","title":"PrecedenceChain21 Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds, then \"S\" previously held and was preceded by \"T\"\n</code></pre>"},{"location":"references/patterns.html#countertraces_74","title":"Countertraces","text":"<pre><code>\u2308(!P &amp;&amp; !T)\u2309;\u2308(!P &amp;&amp; R)\u2309;true\n\u2308(!P &amp;&amp; !S)\u2309;\u2308(!P &amp;&amp; R)\u2309;true\n\u2308(!P &amp;&amp; !T)\u2309;\u2308(!P &amp;&amp; (S &amp;&amp; !T))\u2309;\u2308(!P &amp;&amp; !T)\u2309;\u2308(!P &amp;&amp; (!S &amp;&amp; T))\u2309;\u2308(!P &amp;&amp; !S)\u2309;\u2308(!P &amp;&amp; R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_74","title":"Phase Event Automata","text":"Positive Examples: PrecedenceChain21 - Before"},{"location":"references/patterns.html#precedencechain21-after","title":"PrecedenceChain21 After","text":"<pre><code>After \"P\", it is always the case that if \"R\" holds, then \"S\" previously held and was preceded by \"T\"\n</code></pre>"},{"location":"references/patterns.html#countertraces_75","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!T\u2309;\u2308R\u2309;true\ntrue;\u2308P\u2309;\u2308!S\u2309;\u2308R\u2309;true\ntrue;\u2308P\u2309;\u2308!T\u2309;\u2308(S &amp;&amp; !T)\u2309;\u2308!T\u2309;\u2308(!S &amp;&amp; T)\u2309;\u2308!S\u2309;\u2308R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_75","title":"Phase Event Automata","text":"Positive Examples: PrecedenceChain21 - After"},{"location":"references/patterns.html#precedencechain21-between","title":"PrecedenceChain21 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds, then \"S\" previously held and was preceded by \"T\"\n</code></pre>"},{"location":"references/patterns.html#countertraces_76","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\ntrue;\u2308(P &amp;&amp; !Q)\u2309;\u2308(!Q &amp;&amp; !S)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\ntrue;\u2308(P &amp;&amp; !Q)\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308(!Q &amp;&amp; (S &amp;&amp; !T))\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308(!Q &amp;&amp; (!S &amp;&amp; T))\u2309;\u2308(!Q &amp;&amp; !S)\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_76","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#precedencechain21-afteruntil","title":"PrecedenceChain21 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds, then \"S\" previously held and was preceded by \"T\"\n</code></pre>"},{"location":"references/patterns.html#countertraces_77","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308(!Q &amp;&amp; R)\u2309;true\ntrue;\u2308P\u2309;\u2308(!Q &amp;&amp; !S)\u2309;\u2308(!Q &amp;&amp; R)\u2309;true\ntrue;\u2308P\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308(!Q &amp;&amp; (S &amp;&amp; !T))\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308(!Q &amp;&amp; (!S &amp;&amp; T))\u2309;\u2308(!Q &amp;&amp; !S)\u2309;\u2308(!Q &amp;&amp; R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_77","title":"Phase Event Automata","text":"Positive Examples: PrecedenceChain21 - AfterUntil"},{"location":"references/patterns.html#reccurrenceboundl","title":"ReccurrenceBoundL","text":""},{"location":"references/patterns.html#reccurrenceboundl-globally","title":"ReccurrenceBoundL Globally","text":"<pre><code>Globally, it is always the case that \"R\" holds at least every \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_78","title":"Countertraces","text":"<pre><code>true;\u2308!R\u2309 \u2227 \u2113 &gt; 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_78","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#reccurrenceboundl-before","title":"ReccurrenceBoundL Before","text":"<pre><code>Before \"P\", it is always the case that \"R\" holds at least every \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_79","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; !R)\u2309 \u2227 \u2113 &gt; 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_79","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#reccurrenceboundl-after","title":"ReccurrenceBoundL After","text":"<pre><code>After \"P\", it is always the case that \"R\" holds at least every \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_80","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308!R\u2309 \u2227 \u2113 &gt; 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_80","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#reccurrenceboundl-between","title":"ReccurrenceBoundL Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that \"R\" holds at least every \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_81","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309 \u2227 \u2113 &gt; 5;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_81","title":"Phase Event Automata","text":"Positive Examples: ReccurrenceBoundL - Between"},{"location":"references/patterns.html#reccurrenceboundl-afteruntil","title":"ReccurrenceBoundL AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that \"R\" holds at least every \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_82","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309 \u2227 \u2113 &gt; 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_82","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#response","title":"Response","text":""},{"location":"references/patterns.html#response-before","title":"Response Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds, then \"S\" eventually holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_83","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308(!P &amp;&amp; !S)\u2309;\u2308P\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_83","title":"Phase Event Automata","text":"Positive Examples: Response - Before"},{"location":"references/patterns.html#response-between","title":"Response Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds, then \"S\" eventually holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_84","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308(!Q &amp;&amp; !S)\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_84","title":"Phase Event Automata","text":"Positive Examples: Response - Between"},{"location":"references/patterns.html#response-afteruntil","title":"Response AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds, then \"S\" eventually holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_85","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308(!Q &amp;&amp; !S)\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_85","title":"Phase Event Automata","text":"Positive Examples: Response - AfterUntil"},{"location":"references/patterns.html#responseboundl1","title":"ResponseBoundL1","text":""},{"location":"references/patterns.html#responseboundl1-globally","title":"ResponseBoundL1 Globally","text":"<pre><code>Globally, it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds afterwards\n</code></pre>"},{"location":"references/patterns.html#countertraces_86","title":"Countertraces","text":"<pre><code>true;\u2308R\u2309 \u2227 \u2113 \u2265 5;\u2308!S\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_86","title":"Phase Event Automata","text":"Positive Examples: ResponseBoundL1 - Globally"},{"location":"references/patterns.html#responseboundl1-before","title":"ResponseBoundL1 Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds afterwards\n</code></pre>"},{"location":"references/patterns.html#countertraces_87","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!P &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_87","title":"Phase Event Automata","text":"Positive Examples: ResponseBoundL1 - Before"},{"location":"references/patterns.html#responseboundl1-after","title":"ResponseBoundL1 After","text":"<pre><code>After \"P\", it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds afterwards\n</code></pre>"},{"location":"references/patterns.html#countertraces_88","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308R\u2309 \u2227 \u2113 \u2265 5;\u2308!S\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_88","title":"Phase Event Automata","text":"Positive Examples: ResponseBoundL1 - After"},{"location":"references/patterns.html#responseboundl1-between","title":"ResponseBoundL1 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds afterwards\n</code></pre>"},{"location":"references/patterns.html#countertraces_89","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!Q &amp;&amp; !S)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_89","title":"Phase Event Automata","text":"Positive Examples: ResponseBoundL1 - Between"},{"location":"references/patterns.html#responseboundl1-afteruntil","title":"ResponseBoundL1 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds afterwards\n</code></pre>"},{"location":"references/patterns.html#countertraces_90","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!Q &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_90","title":"Phase Event Automata","text":"Positive Examples: ResponseBoundL1 - AfterUntil"},{"location":"references/patterns.html#responseboundl12","title":"ResponseBoundL12","text":""},{"location":"references/patterns.html#responseboundl12-globally","title":"ResponseBoundL12 Globally","text":"<pre><code>Globally, it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds afterwards for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_91","title":"Countertraces","text":"<pre><code>true;\u2308R\u2309 \u2227 \u2113 \u2265 5;\u2308S\u2309 \u2227 \u2113 &lt;\u2080 10;\u2308!S\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_91","title":"Phase Event Automata","text":"Positive Examples: ResponseBoundL12 - Globally"},{"location":"references/patterns.html#responseboundl12-before","title":"ResponseBoundL12 Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds afterwards for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_92","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!P &amp;&amp; S)\u2309 \u2227 \u2113 &lt;\u2080 10;\u2308(!P &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_92","title":"Phase Event Automata","text":"Positive Examples: ResponseBoundL12 - Before"},{"location":"references/patterns.html#responseboundl12-after","title":"ResponseBoundL12 After","text":"<pre><code>After \"P\", it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds afterwards for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_93","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308R\u2309 \u2227 \u2113 \u2265 5;\u2308S\u2309 \u2227 \u2113 &lt;\u2080 10;\u2308!S\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_93","title":"Phase Event Automata","text":"Positive Examples: ResponseBoundL12 - After"},{"location":"references/patterns.html#responseboundl12-between","title":"ResponseBoundL12 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds afterwards for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_94","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!Q &amp;&amp; S)\u2309 \u2227 \u2113 &lt;\u2080 10;\u2308(!Q &amp;&amp; !S)\u2309;true;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_94","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#responseboundl12-afteruntil","title":"ResponseBoundL12 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds afterwards for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_95","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!Q &amp;&amp; S)\u2309 \u2227 \u2113 &lt;\u2080 10;\u2308(!Q &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_95","title":"Phase Event Automata","text":"Positive Examples: ResponseBoundL12 - AfterUntil"},{"location":"references/patterns.html#responsechain12","title":"ResponseChain12","text":""},{"location":"references/patterns.html#responsechain12-before","title":"ResponseChain12 Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds, then \"S\" eventually holds and is succeeded by \"T\"\n</code></pre>"},{"location":"references/patterns.html#countertraces_96","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308(!P &amp;&amp; !S)\u2309;\u2308P\u2309;true\n\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308!P\u2309;\u2308(!P &amp;&amp; S)\u2309;\u2308(!P &amp;&amp; !T)\u2309;\u2308P\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_96","title":"Phase Event Automata","text":"Positive Examples: ResponseChain12 - Before"},{"location":"references/patterns.html#responsechain12-between","title":"ResponseChain12 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds, then \"S\" eventually holds and is succeeded by \"T\"\n</code></pre>"},{"location":"references/patterns.html#countertraces_97","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !S)\u2309;\u2308Q\u2309;true\ntrue;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; S)\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_97","title":"Phase Event Automata","text":"Positive Examples: ResponseChain12 - Between"},{"location":"references/patterns.html#responsechain12-afteruntil","title":"ResponseChain12 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds, then \"S\" eventually holds and is succeeded by \"T\"\n</code></pre>"},{"location":"references/patterns.html#countertraces_98","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !S)\u2309;\u2308Q\u2309;true\ntrue;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; S)\u2309;\u2308(!Q &amp;&amp; !T)\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_98","title":"Phase Event Automata","text":"Positive Examples: ResponseChain12 - AfterUntil"},{"location":"references/patterns.html#responsedelay","title":"ResponseDelay","text":""},{"location":"references/patterns.html#responsedelay-globally","title":"ResponseDelay Globally","text":"<pre><code>Globally, it is always the case that if \"R\" holds, then \"S\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_99","title":"Countertraces","text":"<pre><code>true;\u2308(R &amp;&amp; !S)\u2309;\u2308!S\u2309 \u2227 \u2113 &gt; 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_99","title":"Phase Event Automata","text":"Positive Examples: ResponseDelay - Globally"},{"location":"references/patterns.html#responsedelay-before","title":"ResponseDelay Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds, then \"S\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_100","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308(!P &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_100","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#responsedelay-after","title":"ResponseDelay After","text":"<pre><code>After \"P\", it is always the case that if \"R\" holds, then \"S\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_101","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308(R &amp;&amp; !S)\u2309;\u2308!S\u2309 \u2227 \u2113 &gt; 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_101","title":"Phase Event Automata","text":"Positive Examples: ResponseDelay - After"},{"location":"references/patterns.html#responsedelay-between","title":"ResponseDelay Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds, then \"S\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_102","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308(!Q &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 5;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_102","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#responsedelay-afteruntil","title":"ResponseDelay AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds, then \"S\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_103","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; (R &amp;&amp; !S))\u2309;\u2308(!Q &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 5;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_103","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#responsedelayboundl1","title":"ResponseDelayBoundL1","text":""},{"location":"references/patterns.html#responsedelayboundl1-globally","title":"ResponseDelayBoundL1 Globally","text":"<pre><code>Globally, it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds after at most \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_104","title":"Countertraces","text":"<pre><code>true;\u2308R\u2309 \u2227 \u2113 \u2265 5;\u2308!S\u2309 \u2227 \u2113 &gt; 10;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_104","title":"Phase Event Automata","text":"Positive Examples: ResponseDelayBoundL1 - Globally"},{"location":"references/patterns.html#responsedelayboundl1-before","title":"ResponseDelayBoundL1 Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds after at most \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_105","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!P &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 10;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_105","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#responsedelayboundl1-after","title":"ResponseDelayBoundL1 After","text":"<pre><code>After \"P\", it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds after at most \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_106","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308R\u2309 \u2227 \u2113 \u2265 5;\u2308!S\u2309 \u2227 \u2113 &gt; 10;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_106","title":"Phase Event Automata","text":"Positive Examples: ResponseDelayBoundL1 - After"},{"location":"references/patterns.html#responsedelayboundl1-between","title":"ResponseDelayBoundL1 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds after at most \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_107","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!Q &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 10;true;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_107","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#responsedelayboundl1-afteruntil","title":"ResponseDelayBoundL1 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds for at least \"5\" time units, then \"S\" holds after at most \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_108","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!Q &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 10;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_108","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#responsedelayboundl2","title":"ResponseDelayBoundL2","text":""},{"location":"references/patterns.html#responsedelayboundl2-globally","title":"ResponseDelayBoundL2 Globally","text":"<pre><code>Globally, it is always the case that if \"R\" holds, then \"S\" holds after at most \"5\" time units for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_109","title":"Countertraces","text":"<pre><code>true;\u2308R\u2309;\u2308!S\u2309 \u2227 \u2113 &gt; 5;true\ntrue;\u2308R\u2309;\u2308!S\u2309 \u2227 \u2113 &lt;\u2080 5;\u2308S\u2309 \u2227 \u2113 &lt; 10;\u2308!S\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_109","title":"Phase Event Automata","text":"Positive Examples: ResponseDelayBoundL2 - Globally"},{"location":"references/patterns.html#responsedelayboundl2-before","title":"ResponseDelayBoundL2 Before","text":"<pre><code>Before \"P\", it is always the case that if \"R\" holds, then \"S\" holds after at most \"5\" time units for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_110","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308(!P &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 5;true\n\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309;\u2308(!P &amp;&amp; !S)\u2309 \u2227 \u2113 &lt;\u2080 5;\u2308(!P &amp;&amp; S)\u2309 \u2227 \u2113 &lt; 10;\u2308(!P &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_110","title":"Phase Event Automata","text":"Positive Examples: ResponseDelayBoundL2 - Before"},{"location":"references/patterns.html#responsedelayboundl2-after","title":"ResponseDelayBoundL2 After","text":"<pre><code>After \"P\", it is always the case that if \"R\" holds, then \"S\" holds after at most \"5\" time units for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_111","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308R\u2309;\u2308!S\u2309 \u2227 \u2113 &gt; 5;true\ntrue;\u2308P\u2309;true;\u2308R\u2309;\u2308!S\u2309 \u2227 \u2113 &lt;\u2080 5;\u2308S\u2309 \u2227 \u2113 &lt; 10;\u2308!S\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_111","title":"Phase Event Automata","text":"Positive Examples: ResponseDelayBoundL2 - After"},{"location":"references/patterns.html#responsedelayboundl2-between","title":"ResponseDelayBoundL2 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that if \"R\" holds, then \"S\" holds after at most \"5\" time units for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_112","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 5;true;\u2308Q\u2309;true\ntrue;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !S)\u2309 \u2227 \u2113 &lt;\u2080 5;\u2308(!Q &amp;&amp; S)\u2309 \u2227 \u2113 &lt; 10;\u2308(!Q &amp;&amp; !S)\u2309;true;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_112","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#responsedelayboundl2-afteruntil","title":"ResponseDelayBoundL2 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that if \"R\" holds, then \"S\" holds after at most \"5\" time units for at least \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_113","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !S)\u2309 \u2227 \u2113 &gt; 5;true\ntrue;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309;\u2308(!Q &amp;&amp; !S)\u2309 \u2227 \u2113 &lt;\u2080 5;\u2308(!Q &amp;&amp; S)\u2309 \u2227 \u2113 &lt; 10;\u2308(!Q &amp;&amp; !S)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_113","title":"Phase Event Automata","text":"Positive Examples: ResponseDelayBoundL2 - AfterUntil"},{"location":"references/patterns.html#triggerresponseboundl1","title":"TriggerResponseBoundL1","text":""},{"location":"references/patterns.html#triggerresponseboundl1-globally","title":"TriggerResponseBoundL1 Globally","text":"<pre><code>Globally, it is always the case that after \"R\" holds for at least \"5\" time units and \"S\" holds, then \"T\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_114","title":"Countertraces","text":"<pre><code>true;\u2308R\u2309 \u2227 \u2113 \u2265 5;\u2308(R &amp;&amp; (S &amp;&amp; !T))\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_114","title":"Phase Event Automata","text":"Positive Examples: TriggerResponseBoundL1 - Globally"},{"location":"references/patterns.html#triggerresponseboundl1-before","title":"TriggerResponseBoundL1 Before","text":"<pre><code>Before \"P\", it is always the case that after \"R\" holds for at least \"5\" time units and \"S\" holds, then \"T\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_115","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!P &amp;&amp; (R &amp;&amp; (S &amp;&amp; !T)))\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_115","title":"Phase Event Automata","text":"Positive Examples: TriggerResponseBoundL1 - Before"},{"location":"references/patterns.html#triggerresponseboundl1-after","title":"TriggerResponseBoundL1 After","text":"<pre><code>After \"P\", it is always the case that after \"R\" holds for at least \"5\" time units and \"S\" holds, then \"T\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_116","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308R\u2309 \u2227 \u2113 \u2265 5;\u2308(R &amp;&amp; (S &amp;&amp; !T))\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_116","title":"Phase Event Automata","text":"Positive Examples: TriggerResponseBoundL1 - After"},{"location":"references/patterns.html#triggerresponseboundl1-between","title":"TriggerResponseBoundL1 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that after \"R\" holds for at least \"5\" time units and \"S\" holds, then \"T\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_117","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!Q &amp;&amp; (R &amp;&amp; (S &amp;&amp; !T)))\u2309;true;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_117","title":"Phase Event Automata","text":"Positive Examples: TriggerResponseBoundL1 - Between"},{"location":"references/patterns.html#triggerresponseboundl1-afteruntil","title":"TriggerResponseBoundL1 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that after \"R\" holds for at least \"5\" time units and \"S\" holds, then \"T\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_118","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!Q &amp;&amp; (R &amp;&amp; (S &amp;&amp; !T)))\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_118","title":"Phase Event Automata","text":"Positive Examples: TriggerResponseBoundL1 - AfterUntil"},{"location":"references/patterns.html#triggerresponsedelayboundl1","title":"TriggerResponseDelayBoundL1","text":""},{"location":"references/patterns.html#triggerresponsedelayboundl1-globally","title":"TriggerResponseDelayBoundL1 Globally","text":"<pre><code>Globally, it is always the case that after \"R\" holds for at least \"5\" time units and \"S\" holds, then \"T\" holds after at most \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_119","title":"Countertraces","text":"<pre><code>true;\u2308R\u2309 \u2227 \u2113 \u2265 5;\u2308(R &amp;&amp; (S &amp;&amp; !T))\u2309;\u2308!T\u2309 \u2227 \u2113 &gt; 10;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_119","title":"Phase Event Automata","text":"Positive Examples: TriggerResponseDelayBoundL1 - Globally"},{"location":"references/patterns.html#triggerresponsedelayboundl1-before","title":"TriggerResponseDelayBoundL1 Before","text":"<pre><code>Before \"P\", it is always the case that after \"R\" holds for at least \"5\" time units and \"S\" holds, then \"T\" holds after at most \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_120","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!P &amp;&amp; (R &amp;&amp; (S &amp;&amp; !T)))\u2309;\u2308(!P &amp;&amp; !T)\u2309 \u2227 \u2113 &gt; 10;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_120","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#triggerresponsedelayboundl1-after","title":"TriggerResponseDelayBoundL1 After","text":"<pre><code>After \"P\", it is always the case that after \"R\" holds for at least \"5\" time units and \"S\" holds, then \"T\" holds after at most \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_121","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308R\u2309 \u2227 \u2113 \u2265 5;\u2308(R &amp;&amp; (S &amp;&amp; !T))\u2309;\u2308!T\u2309 \u2227 \u2113 &gt; 10;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_121","title":"Phase Event Automata","text":"Positive Examples: TriggerResponseDelayBoundL1 - After"},{"location":"references/patterns.html#triggerresponsedelayboundl1-between","title":"TriggerResponseDelayBoundL1 Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that after \"R\" holds for at least \"5\" time units and \"S\" holds, then \"T\" holds after at most \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_122","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!Q &amp;&amp; (R &amp;&amp; (S &amp;&amp; !T)))\u2309;\u2308(!Q &amp;&amp; !T)\u2309 \u2227 \u2113 &gt; 10;true;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_122","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#triggerresponsedelayboundl1-afteruntil","title":"TriggerResponseDelayBoundL1 AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that after \"R\" holds for at least \"5\" time units and \"S\" holds, then \"T\" holds after at most \"10\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_123","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; R)\u2309 \u2227 \u2113 \u2265 5;\u2308(!Q &amp;&amp; (R &amp;&amp; (S &amp;&amp; !T)))\u2309;\u2308(!Q &amp;&amp; !T)\u2309 \u2227 \u2113 &gt; 10;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_123","title":"Phase Event Automata","text":""},{"location":"references/patterns.html#universality","title":"Universality","text":""},{"location":"references/patterns.html#universality-globally","title":"Universality Globally","text":"<pre><code>Globally, it is always the case that \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_124","title":"Countertraces","text":"<pre><code>true;\u2308!R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_124","title":"Phase Event Automata","text":"Positive Examples: Universality - Globally"},{"location":"references/patterns.html#universality-before","title":"Universality Before","text":"<pre><code>Before \"P\", it is always the case that \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_125","title":"Countertraces","text":"<pre><code>\u2308!P\u2309;\u2308(!P &amp;&amp; !R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_125","title":"Phase Event Automata","text":"Positive Examples: Universality - Before"},{"location":"references/patterns.html#universality-after","title":"Universality After","text":"<pre><code>After \"P\", it is always the case that \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_126","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;true;\u2308!R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_126","title":"Phase Event Automata","text":"Positive Examples: Universality - After"},{"location":"references/patterns.html#universality-between","title":"Universality Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_127","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_127","title":"Phase Event Automata","text":"Positive Examples: Universality - Between"},{"location":"references/patterns.html#universality-afteruntil","title":"Universality AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that \"R\" holds\n</code></pre>"},{"location":"references/patterns.html#countertraces_128","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; !R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_128","title":"Phase Event Automata","text":"Positive Examples: Universality - AfterUntil"},{"location":"references/patterns.html#universalitydelay","title":"UniversalityDelay","text":""},{"location":"references/patterns.html#universalitydelay-globally","title":"UniversalityDelay Globally","text":"<pre><code>Globally, it is always the case that \"R\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_129","title":"Countertraces","text":"<pre><code>\u2308true\u2309 \u2227 \u2113 \u2265 5;\u2308!R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_129","title":"Phase Event Automata","text":"Positive Examples: UniversalityDelay - Globally"},{"location":"references/patterns.html#universalitydelay-before","title":"UniversalityDelay Before","text":"<pre><code>Before \"P\", it is always the case that \"R\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_130","title":"Countertraces","text":"<pre><code>\u2308!P\u2309 \u2227 \u2113 \u2265 5;\u2308(!P &amp;&amp; !R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_130","title":"Phase Event Automata","text":"Positive Examples: UniversalityDelay - Before"},{"location":"references/patterns.html#universalitydelay-after","title":"UniversalityDelay After","text":"<pre><code>After \"P\", it is always the case that \"R\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_131","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308true\u2309 \u2227 \u2113 \u2265 5;\u2308!R\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_131","title":"Phase Event Automata","text":"Positive Examples: UniversalityDelay - After"},{"location":"references/patterns.html#universalitydelay-between","title":"UniversalityDelay Between","text":"<pre><code>Between \"P\" and \"Q\", it is always the case that \"R\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_132","title":"Countertraces","text":"<pre><code>true;\u2308(P &amp;&amp; !Q)\u2309;\u2308!Q\u2309 \u2227 \u2113 \u2265 5;\u2308(!Q &amp;&amp; !R)\u2309;true;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_132","title":"Phase Event Automata","text":"Positive Examples: UniversalityDelay - Between"},{"location":"references/patterns.html#universalitydelay-afteruntil","title":"UniversalityDelay AfterUntil","text":"<pre><code>After \"P\" until \"Q\", it is always the case that \"R\" holds after at most \"5\" time units\n</code></pre>"},{"location":"references/patterns.html#countertraces_133","title":"Countertraces","text":"<pre><code>true;\u2308P\u2309;\u2308!Q\u2309 \u2227 \u2113 \u2265 5;\u2308(!Q &amp;&amp; !R)\u2309;true\n</code></pre>"},{"location":"references/patterns.html#phase-event-automata_133","title":"Phase Event Automata","text":"Positive Examples: UniversalityDelay - AfterUntil"},{"location":"references/pea.html","title":"Phase Event Automata","text":"<p>A phase event automaton (PEA) is a special automaton that allows to measure time. In Hanfor, PEAs are used to model the requirements that are already translated into DC-Counterexample Formulae. PEAs are used as an intermediate step between the formalized requirements and the requirements check respectively test generation procedure. In this documentation, we included the PEA representation of the available patterns as it often helps to get a more precise idea of what the exact meaning of a pattern is. Although a restricted english grammar is used to express requirements, it may happen that people have different interpretations of one and the same requirement. The PEA representation of a requirement however is unambiguous.</p> <p>This short guide should give you an intuitive understanding of how to interpret the phase event automata given in the pattern section of this documentation. If you are interested in a formal description of phase event automata, please refer to our paper \"Scalable Analysis of Real-Time Requirements\".</p>"},{"location":"references/pea.html#representation-of-peas","title":"Representation of PEAs","text":"<p>Figure 1 shows a phase event automaton representing the following requirement:</p> <pre><code>req1: Globally, it is always the case that if \"R\" holds for at least \"5\" time units, then \"Q\" holds afterwards.\n</code></pre> <p> Figure 1: Phase event automaton modeling requirement req1. </p> <p>First we will have a look at the different components that are used to depict a PEA. </p> <p>Variables: The variables and time constants that occur in the PEA are directly coming from the corresponding requirement. req1 contains two boolean variables, namely \"R\" and \"Q\", and the timing constant \"5\". Each timing constant is related to a unique clock variable. The timing constant and its corresponding clock variable can be found in the PEA as a boolean time constraint, e.g. \"c0&lt;5\". The boolean variables can occur as unprimed variables (e.g. Q) and primed variables (e.g. Q'). Unprimed variables are related to the current point in time whereas primed variables are related to a point in time in the future.</p> <p>Phases: The PEA consists of locations or phases, and edges representing transistions between the phases. Each phase of the PEA consists of a unique name, a phase invariant and a clock invariant. E.g. consider the PEA phase given in Figure 2. The name is \"st01W\", the phase invariant is given by the expression \"R\" and the clock invariant by the time constraint \"c0&lt;=5\". If a phase has an incoming edge that has no source, we call it \"initial\".</p> <p> Figure 2: Exemplary phase of a PEA defined by its name, phase invariant, and clock invariant. </p> <p>Transitions: Each transition between phases is labeled with a boolean expression called \"guard\" and may additionally carry a clock reset statement. The guard may contain primed and unprimed variables as well as timing constraints. A transition from one phase to another can only be taken if the guarding expression is satisfied: This means that the guarding expression must evaluate to true under the current valuation (for unprimed variables and the clock constraint) together with the subsequent valuation (for the primed variables). If there is no constraint the guard is trivially satisfied and hence set to true.</p>"},{"location":"references/pea.html#run-of-a-pea","title":"Run of a PEA","text":"<p>Next we want to be able to describe the behavior that is (not) included in a PEA. Other than most types of automata, a PEA has no explicit acceptance condition. </p> <p>A configuration of a PEA contains a location, a valuation of the variables and clocks, and a duration.</p> <p>A run of a PEA is a sequence of configurations such that the following conditions are satisfied:</p> <ul> <li>The location of the first configuration is initial.</li> <li>In each configuration, the valuation of variables fulfils the phase invariant of the corresponding location. </li> <li>In each configuration, the valuation of clocks and the clocks increased by the duration fulfils the clock invariant of the corresponding location.</li> <li>For every pair of consecutive configurations, there is an edge from the location of the predecessor configuration to the location of the consecutive configuration such that the guard is fulfilled. </li> </ul> <p>Example 1: Configurations of a PEA</p> <p>Consider the PEA for req1 (Figure 1). It contains the variables \"R, Q\", the clock variable \"c0\", and the locations \"st0, st01W, st01\".</p> <p>Below you find some configurations of the given PEA:</p> <ul> <li>(st0, {R=true, Q=false}, {c0=2}, 2)</li> <li>(st01W, {R=true, Q=true}, {c0=4}, 6)</li> <li>(st01, {R=false, Q=true}, {c0=7}, 3)</li> </ul> <p>Example 2: Run of a PEA</p> <p>Consider the PEA for req1 (Figure 1). It contains the variables \"R, Q\", the clock variable \"c0\", and the locations \"st0, st01W, st01\". The following sequence of three configurations describes a run of the given PEA: <p> (st0, {R=false, Q=false}, {c0=0}, 1); (st01W, {R=true, Q=false}, {c0=0}, 5); (st01, {R=true, Q=true}, {c0=5}, 2) </p></p> <p>Let us check whether the conditions for a run are satisfied for all configurations in the sequence:</p> <p>1. Configuration:</p> <ul> <li>The location \"st0\" is initial as it has an incoming edge without source. </li> <li>The phase invariant \"!R\" is fulfilled by the valuation \"R=false\". </li> <li>The clock invariant true cannot be violated. </li> <li>There is an edge from location \"st0\" to location \"st01W\" of the second configuration. The guard is true and can not be violated.</li> </ul> <p>2. Configuration:</p> <ul> <li>The phase invariant \"R\" is fulfilled by the valuation \"R=true\". </li> <li>The clock invariant \"c0&lt;=5\" is fulfilled by the clock valuation \"c0=0\" (as the clock was reset) and also holds for the entire duration of \"5\". </li> <li>There is an edge from location \"st01W\" to location \"st01\" of the third configuration with the guarding expression \"c0&gt;=5\". The guard is fulfilled by the clock valuation increased by the duration.</li> </ul> <p>3. Configuration:</p> <ul> <li>The phase invariant \"Q &amp;&amp; R\" is fulfilled by the valuation \"R=true, Q=true\".</li> <li>The clock invariant is \"true\" and hence trivially satisfied.</li> </ul> <p>Example 3: Not-included Run of a PEA</p> <p>Consider the PEA for req1 (Figure 1). It contains the variables \"R, Q\", the clock variable \"c0\", and the locations \"st0, st01W, st01\". The following sequence of two configurations is not included in the given PEA: <p> (st01W, {R=true, Q=true}, {c0=2}, 3); (st01, {R=true, Q=false}, {c0=7}, 32) </p></p> <p>Let us check whether the conditions for a run are satisfied for all configurations in the sequence:</p> <p>1. Configuration:</p> <ul> <li>The location \"st01W\" is initial as it has an incoming edge without source. </li> <li>The phase invariant \"R\" is fulfilled by the valuation \"R=true\". </li> <li>The clock invariant \"c0&lt;=5\" is fulfilled by the clock valuation \"c0=2\" and also holds for the entire duration of \"3\".</li> <li>There is an edge from location \"st01W\" to the location \"st01\" of the second configuration with the guarding expression \"c0&gt;=5\". The guard is fulfilled by the clock valuation increased by the duration.</li> </ul> <p>2. Configuration:</p> <ul> <li>The phase invariant \"Q &amp;&amp; R\" is violated by the valuation \"Q=false\". </li> <li>The clock invariant is \"true\" and hence trivially satisfied.</li> </ul> <p>As the phase invariant condition is violated in the second configuration, the given sequence is not included in the given PEA.</p>"},{"location":"references/pea.html#timing-diagram","title":"Timing Diagram","text":"<p>As the tupel representation of a run is not necessarily intuitive, we often depict a run in form of a timing diagram. Below you find the timing diagram representation of the run described in Example 1. </p> <p> Figure 3: Timing diagram representation of a run included in the PEA of req1. </p>"},{"location":"references/publications.html","title":"Publications","text":""},{"location":"references/publications.html#hanfor-semantic-requirements-review-at-scale","title":"Hanfor: Semantic Requirements Review at Scale","text":"<p>Samuel Becker, Daniel Dietsch, Nico Hauff, Elisabeth Henkel, Vincent Langenfeld, Andreas Podelski, Bernd Westphal. Hanfor: Semantic Requirements Review at Scale. In REFSQ Workshops 2021.</p> <p> image/svg+xml  DOI  PDF</p> Cite <pre><code>@inproceedings{DBLP:conf/refsq/BeckerDHHLPW21,\n  author    = {Samuel Becker and\n               Daniel Dietsch and\n               Nico Hauff and\n               Elisabeth Henkel and\n               Vincent Langenfeld and\n               Andreas Podelski and\n               Bernd Westphal},\n  title     = {Hanfor: Semantic Requirements Review at Scale},\n  booktitle = {{REFSQ} Workshops},\n  series    = {{CEUR} Workshop Proceedings},\n  volume    = {2857},\n  publisher = {CEUR-WS.org},\n  year      = {2021}\n}\n</code></pre>"},{"location":"references/publications.html#formal-requirements-in-an-informal-world","title":"Formal Requirements in an Informal World","text":"<p>Daniel Dietsch, Vincent Langenfeld, Bernd Westphal. Formal Requirements in an Informal World. In IEEE Workshop on Formal Requirements (FORMREQ) 2020.</p> <p> image/svg+xml  DOI  PDF</p> Cite <pre><code>@inproceedings{9224533,\n  author={Daniel Dietsch and\n          Vincent Langenfeld and \n          Bernd Westphal},\n  title={Formal Requirements in an Informal World},\n  booktitle={2020 IEEE Workshop on Formal Requirements (FORMREQ)},\n  year={2020},\n  pages={14-20},\n  doi={10.1109/FORMREQ51202.2020.00010}\n}\n</code></pre>"},{"location":"references/publications.html#scalable-analysis-of-real-time-requirements","title":"Scalable Analysis of Real-Time Requirements","text":"<p>Vincent Langenfeld, Daniel Dietsch, Bernd Westphal, Jochen Hoenicke, and Amalinda Post. Scalable Analysis of Real-Time Requirements.</p> <p> image/svg+xml  DOI  PDF</p> Cite <pre><code>@inproceedings{DBLP:conf/re/LangenfeldDWHP19,\n  author    = {Vincent Langenfeld and\n               Daniel Dietsch and\n               Bernd Westphal and\n               Jochen Hoenicke and\n               Amalinda Post},\n  title     = {Scalable Analysis of Real-Time Requirements},\n  booktitle = {{RE}},\n  pages     = {234--244},\n  publisher = {{IEEE}},\n  year      = {2019}\n}\n</code></pre>"},{"location":"references/publications.html#formalization-and-analysis-of-real-time-requirements-a-feasibility-study-at-bosch","title":"Formalization and Analysis of Real-Time Requirements: a Feasibility Study at BOSCH","text":"<p>Amalinda Post and Jochen Hoenicke. Formalization and Analysis of Real-Time Requirements: a Feasibility Study at BOSCH. In VSTTE 12, pp. 225\u2013240. Springer, 2012.</p> <p> image/svg+xml  DOI  PDF</p> Cite <pre><code>@inproceedings{DBLP:conf/vstte/PostH12,\n  author    = {Amalinda Post and\n               Jochen Hoenicke},\n  title     = {Formalization and Analysis of Real-Time Requirements: {A} Feasibility\n               Study at {BOSCH}},\n  booktitle = {{VSTTE}},\n  series    = {Lecture Notes in Computer Science},\n  volume    = {7152},\n  pages     = {225--240},\n  publisher = {Springer},\n  year      = {2012}\n}\n</code></pre>"},{"location":"references/publications.html#vacuous-real-time-requirements","title":"Vacuous real-time requirements","text":"<p>Amalinda Post, Jochen Hoenicke, and Andreas Podelski. Vacuous real-time requirements. In RE 11, pp. 153\u2013162. IEEE, 2011.</p> <p> image/svg+xml  DOI  PDF</p> Cite <pre><code>@inproceedings{DBLP:conf/re/PostHP11,\n  author    = {Amalinda Post and\n               Jochen Hoenicke and\n               Andreas Podelski},\n  title     = {Vacuous real-time requirements},\n  booktitle = {{RE}},\n  pages     = {153--162},\n  publisher = {{IEEE} Computer Society},\n  year      = {2011}\n}\n</code></pre>"},{"location":"references/publications.html#rt-inconsistency-a-new-property-for-real-time-requirements","title":"rt-Inconsistency: A New Property for Real-Time Requirements","text":"<p>Amalinda Post, Jochen Hoenicke, and Andreas Podelski. rt-Inconsistency: A New Property for Real-Time Requirements. In FASE 2011, volume 6603 in LNCS, pp. 34\u201349. Springer, 2011.</p> <p> image/svg+xml  DOI  PDF</p> Cite <pre><code>@inproceedings{DBLP:conf/fase/PostHP11,\n  author    = {Amalinda Post and\n               Jochen Hoenicke and\n               Andreas Podelski},\n  title     = {rt-Inconsistency: {A} New Property for Real-Time Requirements},\n  booktitle = {{FASE}},\n  series    = {Lecture Notes in Computer Science},\n  volume    = {6603},\n  pages     = {34--49},\n  publisher = {Springer},\n  year      = {2011}\n}\n</code></pre>"},{"location":"references/publications.html#applying-restricted-english-grammar-on-automotive-requirementsdoes-it-work-a-case-study","title":"Applying Restricted English Grammar on Automotive Requirements\u2014Does it Work? A Case Study","text":"<p>Amalinda Post, Igor Menzel, and Andreas Podelski. Applying Restricted English Grammar on Automotive Requirements\u2014Does it Work? A Case Study. In REFSQ 2011, volume 6606 in LNCS, pp. 166\u2013180. Springer, 2011.</p> <p> image/svg+xml  DOI  PDF</p> Cite <pre><code>@inproceedings{DBLP:conf/refsq/PostMP11,\n  author    = {Amalinda Post and\n               Igor Menzel and\n               Andreas Podelski},\n  title     = {Applying Restricted English Grammar on Automotive Requirements - Does\n               it Work? {A} Case Study},\n  booktitle = {{REFSQ}},\n  series    = {Lecture Notes in Computer Science},\n  volume    = {6606},\n  pages     = {166--180},\n  publisher = {Springer},\n  year      = {2011}\n}\n</code></pre>"},{"location":"references/patterns/ConstrainedChainPattern.html","title":"ConstrainedChainPattern","text":""},{"location":"references/patterns/ConstrainedChainPattern.html#constrainedchainpattern","title":"ConstrainedChainPattern","text":""},{"location":"references/patterns/ConstrainedChainPattern.html#constrainedchainpattern-before","title":"ConstrainedChainPattern Before","text":"<pre><code>Before \"Q\", it is always the case that if \"W\" holds, then \"V\" eventually holds and is succeeded by \"U\" where \"T\" does not hold between \"V\" and \"U\"\n</code></pre>"},{"location":"references/patterns/ConstrainedChainPattern.html#countertraces","title":"Countertraces","text":"<pre><code>\u2308!Q\u2309;\u2308(!Q &amp;&amp; W)\u2309;\u2308(!Q &amp;&amp; !V)\u2309;\u2308Q\u2309;true\n\u2308!Q\u2309;\u2308(!Q &amp;&amp; W)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; V)\u2309;\u2308(!Q &amp;&amp; !U)\u2309;\u2308Q\u2309;true\n\u2308!Q\u2309;\u2308(!Q &amp;&amp; W)\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; V)\u2309;\u2308(!Q &amp;&amp; !U)\u2309;\u2308(!Q &amp;&amp; (T &amp;&amp; !U))\u2309;\u2308!Q\u2309;\u2308(!Q &amp;&amp; U)\u2309;\u2308!Q\u2309;\u2308Q\u2309;true\n</code></pre>"},{"location":"references/patterns/ConstrainedChainPattern.html#phase-event-automata","title":"Phase Event Automata","text":""},{"location":"references/patterns/ConstrainedChainPattern.html#examples","title":"Examples","text":""},{"location":"references/patterns/ConstrainedChainPattern.html#constrainedchainpattern-between","title":"ConstrainedChainPattern Between","text":"<pre><code>Between \"Q\" and \"R\", it is always the case that if \"X\" holds, then \"W\" eventually holds and is succeeded by \"V\" where \"U\" does not hold between \"W\" and \"V\"\n</code></pre>"},{"location":"references/patterns/ConstrainedChainPattern.html#countertraces_1","title":"Countertraces","text":"<pre><code>true;\u2308(Q &amp;&amp; !R)\u2309;\u2308!R\u2309;\u2308(!R &amp;&amp; X)\u2309;\u2308(!R &amp;&amp; !W)\u2309;\u2308R\u2309;true\ntrue;\u2308(Q &amp;&amp; !R)\u2309;\u2308!R\u2309;\u2308(!R &amp;&amp; X)\u2309;\u2308!R\u2309;\u2308(!R &amp;&amp; W)\u2309;\u2308(!R &amp;&amp; !V)\u2309;\u2308R\u2309;true\ntrue;\u2308(Q &amp;&amp; !R)\u2309;\u2308!R\u2309;\u2308(!R &amp;&amp; X)\u2309;\u2308!R\u2309;\u2308(!R &amp;&amp; W)\u2309;\u2308(!R &amp;&amp; !V)\u2309;\u2308(!R &amp;&amp; (U &amp;&amp; !V))\u2309;\u2308!R\u2309;\u2308(!R &amp;&amp; V)\u2309;\u2308!R\u2309;\u2308R\u2309;true\n</code></pre>"},{"location":"references/patterns/ConstrainedChainPattern.html#phase-event-automata_1","title":"Phase Event Automata","text":""},{"location":"references/patterns/ConstrainedChainPattern.html#examples_1","title":"Examples","text":""},{"location":"references/patterns/ConstrainedChainPattern.html#constrainedchainpattern-afteruntil","title":"ConstrainedChainPattern AfterUntil","text":"<pre><code>After \"Q\" until \"R\", it is always the case that if \"X\" holds, then \"W\" eventually holds and is succeeded by \"V\" where \"U\" does not hold between \"W\" and \"V\"\n</code></pre>"},{"location":"references/patterns/ConstrainedChainPattern.html#countertraces_2","title":"Countertraces","text":"<pre><code>true;\u2308Q\u2309;\u2308!R\u2309;\u2308(!R &amp;&amp; X)\u2309;\u2308(!R &amp;&amp; !W)\u2309;\u2308R\u2309;true\ntrue;\u2308Q\u2309;\u2308!R\u2309;\u2308(!R &amp;&amp; X)\u2309;\u2308!R\u2309;\u2308(!R &amp;&amp; W)\u2309;\u2308(!R &amp;&amp; !V)\u2309;\u2308R\u2309;true\ntrue;\u2308Q\u2309;\u2308!R\u2309;\u2308(!R &amp;&amp; X)\u2309;\u2308!R\u2309;\u2308(!R &amp;&amp; W)\u2309;\u2308(!R &amp;&amp; !V)\u2309;\u2308(!R &amp;&amp; (U &amp;&amp; !V))\u2309;\u2308!R\u2309;\u2308(!R &amp;&amp; V)\u2309;\u2308!R\u2309;\u2308R\u2309;true\n</code></pre>"},{"location":"references/patterns/ConstrainedChainPattern.html#phase-event-automata_2","title":"Phase Event Automata","text":""},{"location":"references/patterns/ConstrainedChainPattern.html#examples_2","title":"Examples","text":""},{"location":"usage/api_queries.html","title":"API queries","text":"<p>To generate reports or search for requirements not using the frontend Hanfor can be queried with HTTP requests at  <code>http(s)://{{your host}}/{{your URL_PREFIX}}/api/query</code></p>"},{"location":"usage/api_queries.html#show-stored-queries","title":"Show stored queries","text":"<p><code>GET /api/query</code></p>"},{"location":"usage/api_queries.html#url-arguments","title":"URL arguments","text":"Name Type Description name string Name of the Query to retrieve a single Query. reload bool, optional Reevaluates all stored Queries."},{"location":"usage/api_queries.html#examples","title":"Examples","text":"<pre><code># Show all stored Queries\ncurl http://localhost:5000/api/query\n\n# Show only Queries which are named 'MyQuery' and re-evaluate the stored Query \ncurl http://localhost:5000/api/query?name=MyQuery&amp;reload=true\n\n# Using jq to parse the JSON response. Show only the name of the query with associated hits.\ncurl http://localhost:5000/api/query\\?reload\\=true | jq -r '.data[] | {name: .name, hits: .hits}'\n</code></pre>"},{"location":"usage/api_queries.html#adding-new-queries","title":"Adding new queries","text":"<p><code>POST /api/query Content-Type: application/json</code></p>"},{"location":"usage/api_queries.html#json-body-parameters","title":"JSON body parameters","text":"Name Type Description name string Name for the Query. Existing ones will be overridden. query string The search Query."},{"location":"usage/api_queries.html#examples_1","title":"Examples","text":"<pre><code>curl -X POST -H 'Content-Type: application/json' \\\n--data '{\"name\": \"MyQuery\", \"query\": \"foo:AND:bar\"}' http://localhost:5000/api/query\n</code></pre>"},{"location":"usage/api_queries.html#deleting-queries","title":"Deleting queries","text":"<p><code>DELETE /api/query</code></p>"},{"location":"usage/api_queries.html#json-body-parameters_1","title":"JSON body parameters","text":"Name Type Description name string Name for the Query to be deleted. names list of strings Queries by name to be deleted."},{"location":"usage/api_queries.html#examples_2","title":"Examples","text":"<pre><code># Delete a single Query:\ncurl -X DELETE -H 'Content-Type: application/json' \\\n--data '{\"name\": \"MyQuery\"}' http://localhost:5000/api/query\n\n# Delete multiple Queries:\ncurl -X DELETE -H 'Content-Type: application/json' \\\n--data '{\"names\": [\"MyQuery\", \"Another\"]' http://localhost:5000/api/query\n</code></pre>"},{"location":"usage/api_queries.html#query-syntax","title":"Query syntax","text":"<p>Much like in the frontend the Query syntax supports operators, nesting, exact- exclusive matches  and targeting  specific attributes.</p>"},{"location":"usage/api_queries.html#search-operators","title":"Search operators","text":"<p>You can concatenate search Queries by</p> <ul> <li><code>search_1:OR:search_2</code> yields the union of search_1 and search_2.</li> <li><code>search_1:AND:search_2</code> yields the intersection of search_1 and search_2.</li> <li><code>:AND:</code> binds stronger than <code>:OR:</code>.</li> </ul> <p>To invert the result use <code>:NOT:</code> before your search string.</p> <p>To change the precedence or to nest a Query <code>(</code> and <code>)</code>.</p>"},{"location":"usage/api_queries.html#exact-searches","title":"Exact searches","text":"<p>You can get exact search results by using <code>\"</code> to indicate the beginning or end of a sequence.</p> <ul> <li><code>\"fast</code> Includes faster but not breakfast.</li> <li><code>fast\"</code> Includes breakfast but not faster.</li> <li><code>\"fast\"</code> Includes only exact matches of fast.</li> </ul>"},{"location":"usage/api_queries.html#target-specific-attributes","title":"Target specific attributes","text":"<p>To limit a part of the search Query to one attribute use the syntax <code>:DATA_TARGET:&lt;the attribute name&gt;</code></p> <p>Note: the attribute name must be enclosed with backticks. </p>"},{"location":"usage/api_queries.html#get-available-attributes","title":"Get available attributes","text":"<p><code>GET /api/quer?show=targets</code></p>"},{"location":"usage/api_queries.html#example","title":"Example","text":"<pre><code># Show attribute names available for specific search.\ncurl http://localhost:5000/api/query?show=targets\n</code></pre> <p>Default targets:</p> <p>The available targets are composed of <pre><code>[\n\"Description\",\n\"Formalization\",\n\"Id\",\n\"Status\",\n\"Tags\",\n\"Type\"\n]\n</code></pre> Plus the fields available in the associated CSV file the requirements origin from.</p>"},{"location":"usage/faq.html","title":"FAQ","text":""},{"location":"usage/faq.html#add-remove-change-patterns-available","title":"Add, remove, change patterns available.","text":"<p>The patterns available in hanfor are defined in the config.py file at the <code>Available patterns</code> section.</p>"},{"location":"usage/faq.html#change-the-order-the-patterns-appear-in-hanfors-frontend-pattern-selection","title":"Change the order the patterns appear in hanfors frontend pattern selection.","text":"<p>Patterns can be ordered by assigned groups or within their group.</p> <p>Assign a Pattern to a Group:</p> <ul> <li>Edit <code>PATTERNS</code> in the config.py</li> <li>Set <code>PATTERN['Pattern_name']['group'] = 'your group name'</code>.</li> </ul> <p>Change the order of the Groups:</p> <ul> <li>Edit <code>PATTERNS_GROUP_ORDER</code> in the config.py file.</li> <li>The order the groups appear in the list <code>PATTERNS_GROUP_ORDER</code> determine how they are ordered in the frontend.</li> </ul> <p>Change the order of pattern within groups</p> <ul> <li>Edit <code>PATTERNS</code> in the config.py file.</li> <li>Set <code>PATTERN['Pattern_name']['pattern_order'] = 5</code> all patterns will be ordered ascending with respect to this  setting.</li> </ul>"},{"location":"usage/faq.html#change-description-or-a-field-text-in-requirements-table","title":"Change description or a field text in requirements table.","text":"<p>Currently there is only one way to achieve this: \u201cCreating a new revision\u201d:</p> <ul> <li>Edit the Description in the CSV -&gt; edited.csv.</li> <li>Create a revision with the edited CSV as baseline: <code>python app.py TAG_NAME -c path/to/edited.csv --revision</code></li> </ul> <p>This will check for changes in the CSV against the old one and create a new \u201cVersion\u201d aka. \u201cRevision\u201d.</p>"},{"location":"usage/requirements.html","title":"Requirements","text":""},{"location":"usage/requirements.html#search-in-requirements-table","title":"Search in requirements table","text":"<p>Searching in the requirements table is accessible via the <code>search</code> tab.  Typing in the search input supports autocomplete for extended search triggered by <code>:</code>. </p>"},{"location":"usage/requirements.html#search-operators","title":"Search Operators","text":"<p>You can concatenate search queries by</p> <ul> <li><code>search_1:OR:search_2</code> yields the union of search_1 and search_2.</li> <li><code>search_1:AND:search_2</code> yields the intersection of search_1 and search_2.</li> <li><code>:AND:</code> binds stronger than <code>:OR:</code>.</li> </ul> <p>To invert the result use <code>:NOT:</code> before your search string.</p>"},{"location":"usage/requirements.html#exact-searches","title":"Exact searches","text":"<p>You can get exact search results by using <code>\"</code> to indicate the beginning or end of a sequence.</p> <ul> <li><code>\"fast</code> Includes faster but not breakfast.</li> <li><code>fast\"</code> Includes breakfast but not faster.</li> <li><code>\"fast\"</code> Includes only exact matches of fast.</li> </ul> Search Target column <p>To target a specific column use <code>:COL_INDEX_02:</code> to target column 2. The column indexes are appended in the requirements table header in parentheses.</p>"},{"location":"usage/requirements.html#mass-edit-requirements","title":"Mass edit requirements","text":"<p>You can mass edit requirements. Select requirements by clicking on the requirement checkbox in the table. Hold shift for multi select and Ctrl to toggle a single selection. Click on <code>Edit Selected</code>, fill out the form. Empty fields will have no effect.</p>"},{"location":"usage/workflow.html","title":"Workflow","text":""},{"location":"usage/workflow.html#example-input","title":"Example input","text":"<p>The CSV file <code>example_intput/example_input.csv</code> contains requirements: <pre><code>ID,Description,Type\nMETA1,This is an example for some requirements,meta\nMETA2,Next we define some requirements,meta\nREQ1,var1 is always greater than 5,requirement\nREQ2,var2 is always smaller than 10,requirement\nREQ3,constraint1 always holds,requirement\nREQ4,constraint2 always holds,requirement\nREQ5,var1 is always smaller than 5,requirement\nREQ6,constraint1 and constraint2 never hold at the same time,requirement\nREQ7,if var3 = True then var4 := 1,requirement\nREQ8,if var3 = True then var4 := 0,requirement\n</code></pre> In this case every row consists of the fields <code>ID</code>, <code>Description</code>, and <code>Type</code>.</p> <ul> <li><code>ID</code> is a unique identifier, </li> <li><code>Description</code> is the description ,</li> <li><code>Type</code>, is a type, in this example <code>meta</code> or <code>requirement</code>, where rows with type <code>meta</code> contain some meta-information and rows with type <code>requirement</code> contain actual requirements of the module you want to formalize.</li> </ul>"},{"location":"usage/workflow.html#start-hanfor","title":"Start Hanfor","text":"<ol> <li>Configure Hanfor as explained in Installation</li> <li> <p>Start Hanfor:  <pre><code>cd hanfor\npython3 app.py -c ../example_input/example_input.csv awesome_tag\n</code></pre></p> </li> <li> <p><code>-c example_input.csv</code> specifies the csv input file we pass.</p> </li> <li><code>example_tag</code> is some meaningful tag you want to give this session.</li> </ol> <p>If you start Hanfor later with the same tag, you'll start exactly this session.</p> <p>Currently the startup of Hanfor is interactive and looks like this: <pre><code>(venv) bree@titan:~/repos/hanfor/hanfor$ python3 app.py -c ../example_input/example_input.csv awesome_tag\n2019-10-10 13:55:17,845: [DEBUG]: Enabled logging.\n2019-10-10 13:55:17,858: [INFO]: Hanfor starts creating a revision.\n2019-10-10 13:55:17,858: [INFO]: No revisions for `awesome_tag`. Creating initial revision.\n2019-10-10 13:55:17,858: [INFO]: Load Input : example/example_input.csv\n2019-10-10 13:55:17,862: [INFO]: Could not guess .csv dialect, assuming defaults\nSelect ID header\n\u2554Choices\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 0    \u2551 Description \u2551\n\u2551 -&gt; 1 \u2551 ID          \u2551\n\u2551 2    \u2551 Type        \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n[Choice or Enter for  -&gt; default]&gt; 1\nSelect requirements description header\n\u2554Choices\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 0 \u2551 Description \u2551\n\u2551 1 \u2551 ID          \u2551\n\u2551 2 \u2551 Type        \u2551\n\u255a\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n[Choice or Enter for  -&gt; default]&gt; 0\nSelect formalization header\n\u2554Choices\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 0 \u2551 Description           \u2551\n\u2551 1 \u2551 ID                    \u2551\n\u2551 2 \u2551 Type                  \u2551\n\u2551 3 \u2551 Add new Formalization \u2551\n\u255a\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n[Choice or Enter for  -&gt; default]&gt; 3\nSelect type header.\n\u2554Choices\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 0 \u2551 Description \u2551\n\u2551 1 \u2551 ID          \u2551\n\u2551 2 \u2551 Type        \u2551\n\u255a\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n[Choice or Enter for  -&gt; default]&gt; 2\n</code></pre></p> <p>Alternatively you can directly pass the header definition, using <code>--header</code>:  <pre><code>python3 app.py -c example_input/example_input.csv --header='{\"csv_id_header\": \"ID\", \"csv_desc_header\": \"Description\", \"csv_formal_header\": \"Hanfor_Formalization\", \"csv_type_header\" : \"Type\"}' awesome_tag\n</code></pre></p> <p>you can now reach Hanfor by visiting http://127.0.0.1:5000</p> <p> Hanfor requirement overview </p>"},{"location":"usage/workflow.html#preprocessing","title":"Preprocessing","text":"<p>By default, all rows now have the status Todo.  It might be the case that you want to change this for a certain set of rows to another status.</p> <p>In this example we want to set every row of type <code>meta</code> to the status Done. </p> <p>To accomplish this we use the Search Query Language. </p> <ol> <li>In Hanfor, search  <code>:COL_INDEX_04:meta</code>. This will search for rows which match \"meta\" in the 4. coloumn (Type).  You should now only see the rows of type <code>meta</code>.</li> <li>Select all rows by clicking  All.</li> <li>Click Edit selected and select Done in the field Set status.</li> <li>Finally, click Apply changes to selected requirements</li> </ol>"},{"location":"usage/workflow.html#formalization","title":"Formalization","text":"<p>Order your requirement overview by Pos, by clicking on the table column.</p>"},{"location":"usage/workflow.html#req1","title":"REQ1","text":"<p>To formalize this requirement, we click on the ID REQ1 to open then formalization-modal:</p> <p> Formalization modal </p> <ol> <li>Click on + to add a new formalization and then on ..(click to open)</li> <li>We now have to select a Scope and a Pattern.</li> <li>The scope is Globally, because the requirement states that \"var1 is always greater than 5\".</li> <li>The pattern is it is always the case that {R} holds.</li> <li>For {R} we insert the condition: <code>var1 &gt; 5</code> </li> <li>Set the status to Review and then press save changes. If you save a requirement, Hanfor will automatically create the used variables and derive their type. You can examine and even alter them in the section Variables, for the case that Hanfor did not derive a variable-type correctly.</li> </ol> <p> Definition of Scope and Pattern </p> <p>The same procedure can be applied to REQ2 - REQ6</p>"},{"location":"usage/workflow.html#req7-and-req8","title":"REQ7 and REQ8","text":"<p>REQ7 and REQ8 are different. Consider REQ7: <code>if var3 = True then var4 := 0</code>.</p> <ul> <li>The scope is still Globally </li> <li>The pattern is it is always the case that if \"{R}\" holds, then \"{S}\" holds after at most \"{T}\" time units, because in a realtime-system a variable assignment does not happen instantly, there can be delays.</li> <li>For {R} we insert <code>var3</code>, because the variable type is boolean.</li> <li>For {S} insert <code>var4 == 0</code>,</li> <li>For {T} we need a certain amount of time units, for example 50. We do not want to hardcode values,  we introduce a new variable and insert <code>MAX_TIME</code>.</li> </ul> <p>We end up with the following:  <pre><code>Globally, it is always the case that if \"var3\" holds, then \"var4 == 0\" holds after at most \"MAX_TIME\" time units.\n</code></pre> Save the formalization. </p> <p>You will now recognize that Hanfor automatically added a new Tag Type_inference_error to your freshly formalized requirement. To fix that, to go the Variables section and open the <code>MAX_TIME</code> variable. You see that Hanfor derived the type <code>bool</code>, but we actually want it to be of type <code>CONST</code> as the variable represents time units. Change the type and also assign a value, for example <code>50</code>.</p> <p> Example for the <code>MAX_TIME</code> variable </p> <p>For REQ8 you should have:  <pre><code>Globally, it is always the case that if \"var3\" holds, then \"var4 == 1\" holds after at most \"MAX_TIME\" time units.\n</code></pre></p>"},{"location":"usage/workflow.html#exporting-the-formalized-requirements","title":"Exporting the formalized requirements.","text":"<p>Once you are done with all requirements, it is time to analyze them using a tool like Ultimate (TODO:ref to git).</p>"},{"location":"usage/workflow.html#preparing-the-export","title":"Preparing the export.","text":"<p>You might want to filter out some rows, for example, all of type <code>meta</code> or all that have a certain tag. Again, use the Search Query Language to select only the requirements you want. For example, if we only rows of type <code>requirement</code> which are not on status Todo we search:</p> <pre><code>:COL_INDEX_04:requirement:AND::COL_INDEX_06::NOT:Todo\n</code></pre>"},{"location":"usage/workflow.html#export","title":"Export","text":"<p>To export requirements, press Tools, then choose either <code>.req</code> or <code>.csv</code>. If you want to analyze the requirements using Ultimate, choose Generate .req file from (filtered) requirements table and then save it.</p> <p>You should end up with the following: <pre><code>CONST MAX_TIME IS 50.0\n\nInput constraint1 IS bool\nInput constraint2 IS bool\nInput var1 IS int\nInput var2 IS int\nInput var3 IS bool\nInput var4 IS int\n\n\nREQ1_0: Globally, it is always the case that \"var1 &gt; 5\" holds\nREQ2_0: Globally, it is always the case that \"var2 &lt; 10\" holds\nREQ3_0: Globally, it is always the case that \"constraint1\" holds\nREQ4_0: Globally, it is always the case that \"constraint2\" holds\nREQ5_0: Globally, it is always the case that \"var1 &lt; 5\" holds\nREQ6_0: Globally, it is never the case that \"constraint1 &amp;&amp; constraint2 \" holds\nREQ7_0: Globally, it is always the case that if \"var3\" holds, then \"var4 == 1\" holds after at most \"MAX_TIME\" time units\nREQ8_0: Globally, it is always the case that if \"var3\" holds, then \"var4 == 0\" holds after at most \"MAX_TIME \" time units\n</code></pre></p>"},{"location":"usage/workflow.html#analysis-using-ultimate","title":"Analysis using Ultimate.","text":""},{"location":"usage/workflow.html#get-reqanalyzer","title":"Get ReqAnalyzer","text":"<p>First of all you need the Ultimate tool ReqAnalyzer. See how in the ReqAnalyzer section.</p>"},{"location":"usage/workflow.html#perform-the-complete-analysis","title":"Perform the complete analysis.","text":"<p>We wrote a script, which perform a complete analysis, including the extraction of relevant information. The script is located in <code>UReqCheck-linux</code>.</p> <ul> <li>You have to configure <code>run_complete_analysis.sh</code>, which is used to run the complete analysis. The script takes several arguments: <pre><code>run_complete_analysis.sh &lt;req_file&gt; &lt;req_repo_folder&gt; &lt;req_folder&gt; [&lt;rt_inconsistency_range&gt; &lt;timeout_per_assertion&gt;]\n</code></pre></li> </ul> <p>Where: * <code>req_file</code> is the Requirements file you generated using Hanfor. * <code>req_repo_folder</code> is the path to the repository, which contains the requirements-folder * <code>req_folder</code> is the path to the requirements-folder * <code>rt_inconsistency_range</code> (default: 2) is the amount of requirements which are checked together for RT-inconsistency.  Careful with this parameter, it will blow up the amount of checks really fast. * <code>timeout_per_assertion</code> (default: 900) The time how long a singles assertion is checked.</p>"},{"location":"usage/workflow.html#use-ultimate","title":"Use Ultimate","text":"<p>Execute the <code>run_complete_analysis.sh</code> script.</p> <pre><code>cd /path/to/UReqCheck-linux\n./run_complete_analysis.sh path/to/repo/example_input/example_input.req path/to/repo/example_input path/to/repo/example_input\n</code></pre> <p>This will start Ultimate and run an analysis. The analysis checks for rt-inconsistency and vacuity and logs are be generated: </p> <ul> <li><code>hanfor/example/example_input.req.log</code></li> <li><code>hanfor/example/example_input.req.testgen.log</code></li> <li><code>hanfor/example/logs/example_input/example_input.req.relevant.log</code></li> <li><code>hanfor/example/logs/example_input/example_input.req.testgen.log</code></li> </ul>"},{"location":"usage/workflow.html#evaluate","title":"Evaluate","text":"<p>In <code>hanfor/example/example_input.req.log</code> we can see that Ultimate reports:  <pre><code> --- Results ---\n * Results from de.uni_freiburg.informatik.ultimate.pea2boogie:\n  - RequirementInconsistentErrorResult: Requirements set is inconsistent.\n    Requirements set is inconsistent. Some invariants are already infeasible. Responsible requirements: REQ6_0, REQ3_0, REQ4_0\n</code></pre></p> <p>Now, if we investigate REQ3, REQ4 and REQ6:</p> <p><pre><code>REQ3_0: Globally, it is always the case that \"constraint1\" holds\nREQ4_0: Globally, it is always the case that \"constraint2\" holds\nREQ6_0: Globally, it is never the case that \"constraint1 &amp;&amp; constraint2 \" holds\n</code></pre> We directly see what the problem is: On one hand, our invariants demand that <code>constraint1</code> and <code>constraint2</code> always holds, but on the other hand there is another invariant which demands that <code>constraint1</code> and <code>constraint2</code> never hold at the same time. Think about this as: <pre><code>constraint1 &amp;&amp; constraint2 &amp;&amp; ((constraint1 &amp;&amp; !constraint2) || (!constraint1 &amp;&amp; constraint2))\n</code></pre> this is clearly unsatisfiable.</p>"},{"location":"usage/workflow.html#alter-your-requirements","title":"Alter your requirements","text":"<p>We found an inconsistency in our requirements, that has to be fixed.  Let's assume you review your requirements and you recognize <code>REQ4</code> was defined wrong in the csv, where <code>REQ4,constraint2 always holds,requirement</code> should be <code>REQ4,constraint2 never holds,requirement</code>. While reading over the requirements, you also recognize that <code>REQ1</code> and <code>REQ5</code> collide and you find out that <code>REQ5</code> shall be deleted.</p> <p>When we apply this changes, we end up with the following changes: </p> <ul> <li>Alter <code>REQ4,constraint2 always holds,requirement</code> to <code>REQ4,constraint2 never holds,requirement</code></li> <li>Remove <code>REQ5</code></li> </ul> <p>and our csv file now looks as follows: </p> <pre><code>ID,Description,Type\nMETA1,This is an example for some requirements,meta\nMETA2,Next we define some requirements,meta\nREQ1,var1 is always greater than 5,requirement\nREQ2,var2 is always smaller than 10,requirement\nREQ3,constraint1 always holds,requirement\nREQ4,constraint2 never holds,requirement\nREQ6,constraint1 and constraint2 never hold at the same time,requirement\nREQ7,if var3 = True then var4 = 0,requirement\nREQ8,if var3 = True then var4 = 1,requirement\n</code></pre>"},{"location":"usage/workflow.html#time-for-a-new-revision","title":"Time for a new revision.","text":"<p>We altered our requirements, we now need to create a new revision in Hanfor and change our formalizations. Execute: </p> <pre><code>cd hanfor\npython3 app.py -r -c example/example_input.csv example_tag\n</code></pre> <ul> <li> <p>Hanfor will then ask: \"Which revision should I use as a base?\", we choose <code>revision_0</code> (as it is the only one, usually you want your latest revision).</p> </li> <li> <p>Then, Hanfor asks Should I use the csv header mapping from base revision?, as we did not change the csv header, we just keep the current one.</p> </li> </ul> <p>A quick recap what happens when creating a revision: * New requirements get the tag <code>revision_0_to_revision_1_new_requirement</code> * Changed requirements get the tag <code>revision_0_to_revision_1_data_changed</code> and <code>revision_0_to_revision_1_description_changed</code> * Requirements where the formalization migrated to the new revision get the tag <code>revision_0_to_revision_1_migrated_formalized</code></p> <p>We now have to alter the requirements which have changed, that's only <code>REQ4</code>.  Open the formalization of <code>REQ4</code> and correct it to <code>Globally, it is never the case that \"constraint2\" holds</code>.</p>"},{"location":"usage/workflow.html#ultimate-analysis-2","title":"Ultimate Analysis #2","text":"<ol> <li>Export your requirements as before with the name <code>example_input_revision1.req</code></li> <li>Run Ultimate on the new requirements file.</li> </ol> <p>You can now examine the log created in <code>hanfor/example/logs/example_input/example_input.req.relevant.log</code>, which contains the following: <pre><code>- ReqCheckFailResult [Line: -1]: Requirements REQ8_0, REQ7_0 are rt-inconsistent\n</code></pre></p> <p>A <code>ReqCheckFailResult</code> usually implies that something is broken,  Ultimate found that requirements <code>REQ7</code> and <code>REQ8</code> are rt-inconsistent, let's analyze this result:</p> <pre><code>REQ7,if var3 = True then var4 = 0,requirement\nREQ8,if var3 = True then var4 = 1,requirement\n</code></pre> <p>These two requirements collide, because they assign different values to <code>var4</code> when <code>var3</code> holds. This is especially bad in a realtime system, because it can happen that <code>var4 == 0</code> holds after a certain amount of time,  and <code>var4 == 1</code> holds at a later point of time or vice versa. Why is this bad? - because it can cause unexpected behaviour when a change propagates through the system.</p>"},{"location":"usage/workflow.html#conclusion","title":"Conclusion","text":"<p>You are now able to:</p> <ol> <li>Setup hanfor, </li> <li>Formalize requirements, </li> <li>Filter requirements, </li> <li>Export them to a .req file</li> <li>Run Ultimate on a .req file</li> <li>Interpret the results of Ultimate</li> <li>Create new revisions in hanfor to fix mistakes in requirements.</li> </ol>"}]}